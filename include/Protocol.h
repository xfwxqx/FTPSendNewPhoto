#ifndef _PROTOCOL_H_
#define _PROTOCOL_H_

#ifdef	__cplusplus
#if		__cplusplus
extern "C" {
#endif
#endif
/*
 ************************************************************************************************************************************************************************
 ************************************************************************************************************************************************************************
 *			程序模块声明
 *
 *			文件:		Protocol.h
 *			版本:		1.0
 *			作者:		曾春桥
 *			日期:		2006/10/08
 *
 *			亚奥数码技术有限公司版权所有 2006-2007
 *
 ************************************************************************************************************************************************************************
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 程序模块功能描述
 *
 *
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 版本 1.0   2006/10/08
 * 初始化版本 
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 引用文件
 ************************************************************************************************************************************************************************
*/


#include "Common.h"
#include "Pm5kType.h"


/*
 ************************************************************************************************************************************************************************
 * 常数与宏定义
 ************************************************************************************************************************************************************************
*/


#define MAX_CLIENT_NUM							SYS_MAX_USER_NUM

#define INVALID_USER_ID							0xFFFFFFFF
#define DEFAULT_USER_ID							0
#define SER_SYNC_REQ_USER_ID					0x7BD753DB
#define	AVCM_INVALID_CLIENT						0xFFFF
#define MMNET_GET_INFO_FAIL						0x000F
#define MMNET_INVALID_OPCODE					0xFFFF
#define MMNET_DEFAULT_DEVID						0

#define	USER_INVALID_LEVEL						0xFF
#define USER_SUPER_LEVEL						0xFE

#define LOCAL_CMD_REPLY_QUEUE_ID				0
#define LOCAL_DATA_QUEUE_ID						1
#define LOCAL_AUDIO_QUEUE_ID					2
#define LOCAL_VIDEO_QUEUE_ID					3
#define REMOTE_CMD_QUEUE_ID						4
#define REMOTE_AUDIO_QUEUE_ID					5
#define REMOTE_CMD_QUEUE_ID2					6
#define LOCAL_AUDIO_QUEUE_ID2					7
#define LOCAL_VIDEO_QUEUE_ID2					8


#define SWITCH_BASE_QUEUE_ID					4

#define PROTOCOL_COMM_QUEUE_DEFAULT_NUM			10
#define PROTOCOL_COMM_QUEUE_MAX_NUM				32
#define PROTOCOL_OWNER_ALL						0xFFFFFFFF
#define PROTOCOL_MAX_USER_NUM					SYS_MAX_USER_NUM
#define PROTOCOL_MULTICAST_USER_INDEX			PROTOCOL_MAX_USER_NUM
#define PROTOCOL_COMM_USER_INDEX				(PROTOCOL_MAX_USER_NUM+1)
#define PROTOCOL_DEFAULT_USER_INDEX				(PROTOCOL_MAX_USER_NUM+2)
#define PROTOCOL_RECORD_DOWNLOAD_MTU			(4*1024)

#define	TCLASS_CHECK_WORD						0x3455

#define MMNET_M_VIDEO							0x01
#define MMNET_M_AUDIO							0x02
#define MMNET_M_DATA							0x03
#define MMNET_I_VIDEO							0x10
#define MMNET_I_AUDIO							0x20
#define MMNET_I_DATA							0x30

#define MMNET_VIDEO_FRAME_BEGIN_FLAG			0x01
#define MMNET_VIDEO_FRAME_END_FLAG				0x02
#define MMNET_VIDEO_FRAME_I_FLAG				0x04

#define MMNET_VIDEO_POLICY_CFR_CBR				0x00
#define MMNET_VIDEO_POLICY_CFR_VBR				0x01
#define MMNET_VIDEO_POLICY_VFR_CBR				0x10
#define MMNET_VIDEO_POLICY_VFR_VBR				0x11

#define NETTYPE_ETH_TCP							0x01
#define NETTYPE_ETH_UDP							0x02
#define NETTYPE_ETH_MCAST						0x03
#define NETTYPE_E1_PTP							0x11
#define NETTYPE_E1_SHARED						0x12
#define NETTYPE_E1_POLLSHARED					0x13

#define REMOTE_NETMODE_ETH						0x01
#define	REMOTE_NETMODE_E1						0x02
#define REMOTE_NETMODE_ETHORE1					0x03
#define REMOTE_NETMODE_DE1						0x04

#define LOCAL_AUDIO_MODE_E1						0x00
#define LOCAL_AUDIO_MODE_ETH					0x01
#define LOCAL_AUDIO_MODE_RELAY					0x02

#define VIDEO_SEND_TRANSPARENCE					0x00
#define VIDEO_SEND_TCP							0x01
#define VIDEO_SEND_UDP							0x02
#define VIDEO_SEND_BCAST						0x100
#define VIDEO_SEND_MCAST						0x200

#define SER_MODE_ONLY_READ						0x100
#define SER_MODE_ONLY_WRITE						0x200
#define SER_MODE_READ_WRITE						0x300

#define	SER_OP_SUCCESS							1
#define	SER_OP_FAIL								0
#define SER_OP_REQ_SYNC							0xDB753D5B

#define AUDIOBUFSIZE							1024
#define SENDBUFSIZE								1024
#define	SERRECVBUFSIZE							1024
#define	BUFFERSIZE								(3*1024)
#define	CMDBUFSIZE								(4*1024)
#define PROTOCOL_PACKET_MIN_SIZE				sizeof(MMNET_HEADER)
#define PROTOCOL_PACKET_MAX_SIZE				sizeof(CMD_PACKET)

#define MAX_SERIAL_NUM							8
#define MAX_SERIAL_NUM_EX						32
#define MAX_TVDEV_NUM							12
#define	SER_DEV_UNIT_IS_VALID(Unit)				((Unit)>=MIN_SERDEV_UNIT && (Unit)<MIN_SERDEV_UNIT+(MAX_SERIAL_NUM-1))
#define	SER_DEV_UNIT_IS_VALID_EX(Unit)			((Unit)>=MIN_SERDEV_UNIT && (Unit)<MIN_SERDEV_UNIT+(MAX_SERIAL_NUM_EX-1))
#define RESERVE_SER_NUM							0
#define CMD_EMBED_SER_ID						0x3553A55A
#define SER_LOOPBACK_ADDR						0

#define DEV_VIRTUAL_RM2300_PROTOCOL_ADDR						1
#define DEV_VIRTUAL_RM2300_DI_GROUP_ID							0
#define DEV_VIRTUAL_RM2300_DO_GROUP_ID							1
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_ADDR_MIN					2
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_ADDR_MAX					(DEV_VIRTUAL_RM2300_VIDEO_WARN_ADDR_MIN+3)
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_DI_GROUP_ID				0
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_DI_BIT_MOTION_DETECT		0
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_DI_BIT_LOST				1
#define DEV_VIRTUAL_RM2300_VIDEO_WARN_DI_BIT_OVERLAY			2


#define DEV_VIRTUAL_CAMERA_PROTOCOL_ADDR		32
#define	DEV_VIRTUAL_CAMERA_OP_UP				0x00
#define	DEV_VIRTUAL_CAMERA_OP_DOWN				0x01
#define	DEV_VIRTUAL_CAMERA_OP_LEFT				0x02
#define	DEV_VIRTUAL_CAMERA_OP_RIGHT				0x03
#define	DEV_VIRTUAL_CAMERA_OP_LEFT_UP			0x04
#define	DEV_VIRTUAL_CAMERA_OP_LEFT_DOWN			0x05
#define	DEV_VIRTUAL_CAMERA_OP_RIGHT_UP			0x06
#define	DEV_VIRTUAL_CAMERA_OP_RIGHT_DOWN		0x07
#define	DEV_VIRTUAL_CAMERA_OP_FOCUS_ADD			0x08
#define	DEV_VIRTUAL_CAMERA_OP_FOCUS_DEC			0x09
#define	DEV_VIRTUAL_CAMERA_OP_IRIS_ADD			0x0A
#define	DEV_VIRTUAL_CAMERA_OP_IRIS_DEC			0x0B
#define	DEV_VIRTUAL_CAMERA_OP_ZOOM_ADD			0x0C
#define	DEV_VIRTUAL_CAMERA_OP_ZOOM_DEC			0x0D
#define	DEV_VIRTUAL_CAMERA_OP_PRESET_SET		0x0E
#define	DEV_VIRTUAL_CAMERA_OP_PRESET_VIEW		0x0F
#define	DEV_VIRTUAL_CAMERA_OP_ALL_STOP			0x10
#define DEV_VIRTUAL_MATRIX_SWITCH_CTRL			0x20
#define DEV_VIRTUAL_CAMERA_OP_AUX_CTRL_ON		0x31
#define DEV_VIRTUAL_CAMERA_OP_AUX_CTRL_OFF		0x32
#define DEV_VIRTUAL_CAMERA_OP_SET_CRUISE_START	0x33
#define DEV_VIRTUAL_CAMERA_OP_SET_CRUISE_END	0x34
#define DEV_VIRTUAL_CAMERA_OP_START_CRUISE		0x35
#define DEV_VIRTUAL_CAMERA_OP_STOP_CRUISE		0x36



#define	DEV_VIRTUAL_CAMERA_PROTOCOL_PELCO_P		0x00
#define	DEV_VIRTUAL_CAMERA_PROTOCOL_PELCO_D		0x01
#define	DEV_VIRTUAL_CAMERA_PROTOCOL_SAMSUNG		0x02
#define	DEV_VIRTUAL_CAMERA_PROTOCOL_PHILIPS		0x03
#define	DEV_VIRTUAL_CAMERA_PROTOCOL_MINGJING	0x04
#define	DEV_VIRTUAL_CAMERA_PROTOCOL_ZCZG368		0x05		/*中船重工集团368厂军品转台协议*/
#define DEV_VIRTUAL_CAMERA_PROTOCOL_ACS			0x06

#define	DEV_VIRTUAL_CAMERA_SPEED_MIN			0x00
#define	DEV_VIRTUAL_CAMERA_SPEED_MAX			0x0F
#define	DEV_VIRTUAL_CAMERA_SPEED_AUTO			(-1)

#define	DEV_VIRTUAL_CAMERA_CH_ID_AUTO					(-1)
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_AUTO_BRUSH		(-1)
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_ZCZG368_FOG		(-1)
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_ACS_EX			0x80		/*镜头扩展*/
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_ACS_IR			0x81		/*红外切换*/
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_ACS_IR_SW_MIN		0x82		/*红外多态切换*/
#define DEV_VIRTUAL_CAMERA_AUX_OBJ_ID_ACS_IR_SW_MAX		0x89

#define	DEV_VIRTUAL_CAMERA_PRESET_PELCO_MIN				0x01
#define	DEV_VIRTUAL_CAMERA_PRESET_PELCOD_MAX			0x20
#define	DEV_VIRTUAL_CAMERA_PRESET_PELCOP_MAX			0xFF
#define	DEV_VIRTUAL_CAMERA_PRESET_OTHER_MIN				0x00
#define	DEV_VIRTUAL_CAMERA_PRESET_SAMSUNG_MAX			0x7F
#define	DEV_VIRTUAL_CAMERA_PRESET_PHILIPS_MAX			0x7FF
#define	DEV_VIRTUAL_CAMERA_PRESET_MINGJING_MAX			0x3F


#define SER_DEV_MATRIX_CTRL_ADDR						33



#define SER_DEV_PM5000_AIR_COND_TELECONTROLLER_ADDR1				47
#define SER_DEV_PM5000_AIR_COND_TELECONTROLLER_ADDR2				48
#define SER_DEV_PM5000_2M_LOOP_STATE_QUERY_ADDR						49
#define SER_DEV_PM5000_POLLING_ADD_ADDR								50
#define SER_DEV_PM5000_STATE_QUERY_ADDR								51
#define SER_DEV_PM5000_AIO_CONFIG_ADDR								52
#define SER_DEV_PM5000_ACCESS_CONFIG_ADDR							53
#define SER_DEV_PM5000_INF_CONFIG_ADDR								61
#define SER_DEV_PM5000_MCU_SUB_EX_CONFIG_ADDR						62
#define SER_DEV_PM5000_SLAVE_CONFIG_ADDR							63
#define SER_DEV_PM5000_CONFIG_CMD_GET								0x01
#define SER_DEV_PM5000_CONFIG_CMD_SET								0x02
#define SER_DEV_PM5000_PCM_ADDR_MIN									54
#define SER_DEV_PM5000_PCM_ADDR_MAX									117
#define SER_DEV_PM5000_ACCESS_CONFIG_UNIT0_ADDR						SER_DEV_PM5000_ACCESS_CONFIG_ADDR
#define	SER_DEV_DOOR_CARD_TYPE_WIEGAND26							0
#define	SER_DEV_DOOR_CARD_TYPE_WIEGAND34							1
#define	SER_DEV_DOOR_CARD_TYPE_PCM									2
#define SER_DEV_PM5000_ACCESS_CONFIG_UNIT1_ADDR						118
#define SER_DEV_PM5000_ACCESS_CONFIG_UNIT2_ADDR						119
#define SER_DEV_PM5000_ACCESS_CONFIG_UNIT3_ADDR						120


#define SER_SYS_MISC_CONF_ADDR										111
#define SER_SYS_MISC_CONF_CMD_GET									0x01
#define SER_SYS_MISC_CONF_CMD_SET									0x02
#define SER_SYS_MISC_CONF_CMD_FSU_CONF_GET							0x03
#define SER_SYS_MISC_CONF_CMD_FSU_CONF_SET							0x04
#define SER_SYS_MISC_CONF_DWRES_MASK_ALARM_TEST_EN					0x0001
#define SER_SYS_MISC_CONF_DWRES_MASK_CTCC_2G3G_IOT_SIM_EN			0x0002
#define SER_SYS_MISC_CONF_DWRES_MASK_PCM_LOG_SAVE_EN				0x0004
#define SER_SYS_MISC_CONF_DWRES_MASK_DOOR_CTRL_EN					0x0008
#define SER_SYS_MISC_CONF_DWRES_MASK_I2C_ERR_CHECK_EN				0x0010


#define SER_PROTOCOL_DECODER_CMD_ADDR								127
#define VIDEO_QUAD_ADDR												146
#define	SELECTVIDEOSRCADDR											147
#define ENCODER_OSD_CTRL_ADDR										204

#define SER_DEV_MISC_TEST_ADDR										212
#define SER_DEV_MISC_TEST_GET										0x01
#define SER_DEV_MISC_TEST_SET										0x02
#define SER_DEV_MISC_TEST_GET_4G_STATUS								0x03
#define SER_DEV_MISC_TEST_GET_HW_CONF								0x04
#define SER_DEV_MISC_TEST_GET_AI_FACTOR								0x05

#define SER_DEV_BI_STAT_ADDR										213
#define SER_DEV_BI_STAT_GET											0x01

#define SER_DEV_SER_AGENT_CONF_ADDR									214
#define SER_DEV_SER_AGENT_CONF_CMD_GET								0x01
#define SER_DEV_SER_AGENT_CONF_CMD_SET								0x02

#define SER_DEV_SMS_AGENT_CON_ADDR									215
#define SER_DEV_SMS_AGENT_CON_CMD_GET								0x01
#define SER_DEV_SMS_AGENT_CON_CMD_SET								0x02

#define SER_DEV_DOOR_CTRL_UNIT_CON_EX_ADDR							216
#define SER_DEV_DOOR_CTRL_UNIT_CON_EX_CMD_GET						0x01
#define SER_DEV_DOOR_CTRL_UNIT_CON_EX_CMD_SET						0x02

#define SER_DEV_ZJVCPT_USER_CON_ADDR								217
#define SER_DEV_ZJVCPT_USER_CON_CMD_GET								0x01
#define SER_DEV_ZJVCPT_USER_CON_CMD_SET								0x02

#define SER_DEV_ZJVCPT_COMM_CON_ADDR								218
#define SER_DEV_ZJVCPT_COMM_CON_CMD_GET								0x01
#define SER_DEV_ZJVCPT_COMM_CON_CMD_SET								0x02

#define SER_DEV_MODBUS_CONFIG_ADDR									219
#define SER_DEV_MODBUS_CMD_GET										0x01
#define SER_DEV_MODBUS_CMD_SET										0x02

#define SER_DEV_WARN_LLINKAGE_SET_ADDR								220
#define SER_DEV_WARN_LLINKAGE_CMD_GET								0x01
#define SER_DEV_WARN_LLINKAGE_CMD_SET								0x02
#define SER_DEV_WARN_LLINKAGE_MAX_ACTION_NUM						16
#define SER_DEV_WARN_LLINKAGE_MAX_VCH_NUM							4
#define SER_DEV_WARN_LLINKAGE_LOST_VDI(ch)							(18+(ch))
#define SER_DEV_WARN_LLINKAGE_OVERLAY_VDI(ch)						(22+(ch))
#define SER_DEV_WARN_LLINKAGE_MD_VDI(ch)							(26+(ch))
#define SER_DEV_WARN_LLINKAGE_NET_BREAK_VDI(ch)						(30+(ch))
#define SER_DEV_WARN_LLINKAGE_CAPTURE_VDO(ch)						(6+(ch))
#define SER_DEV_WARN_LLINKAGE_RECORD_VDO(ch)						(10+(ch))


#define SER_DEV_TEMP_HUM_SENSOR_CON_ADDR							221
#define SER_DEV_TEMP_HUM_SENSOR_CON_CMD_GET							0x01
#define SER_DEV_TEMP_HUM_SENSOR_CON_CMD_SET							0x02


#define SER_DEV_DOOR_CTRL_CON_ADDR           						222     
#define SER_DEV_DOOR_CTRL_CON_CMD_GET         				 		0x01
#define SER_DEV_DOOR_CTRL_CON_CMD_SET          						0x02


#define SER_DEV_MATRIX_CON_ADDR										223
#define SER_DEV_MATRIX_CON_CMD_GET         				 			0x01
#define SER_DEV_MATRIX_CON_CMD_SET         				 			0x02


#define SER_DEV_DECODER_VIDEO_OUT_CH_MODE_CON_ADDR					224
#define SER_DEV_DECODER_VIDEO_OUT_CH_MODE_CON_CMD_GET				0x01
#define SER_DEV_DECODER_VIDEO_OUT_CH_MODE_CON_CMD_SET				0x02

#define SER_DEV_DECODER_VIDEO_OUT_MODE_PAL							0x00
#define SER_DEV_DECODER_VIDEO_OUT_MODE_NTSC							0x01
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080I50						0x02
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080I60						0x03
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080P25						0x04
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080P30						0x05   
#define SER_DEV_DECODER_VIDEO_OUT_MODE_720P60						0x06
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080P50						0x07
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1080P60						0x08
#define SER_DEV_DECODER_VIDEO_OUT_MODE_640X480X60					0x09
#define SER_DEV_DECODER_VIDEO_OUT_MODE_800X600X60					0x0A
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1024X768X60					0x0B
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1280X1024X60					0x0C
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1366X768X60					0x0D
#define SER_DEV_DECODER_VIDEO_OUT_MODE_1440X900X60					0x0E 


#define SER_DEV_MAP_CONFIG_ADDR										225
#define SER_DEV_MAP_CONFIG_CMD_GET									0x01
#define SER_DEV_MAP_CONFIG_CMD_SET									0x02


#define SER_DEV_ZJVCPT_MEDIA_CH_ACCESS_ADDR									226
#define SER_DEV_ZJVCPT_MEDIA_CH_ACCESS_CMD_GET								0x01
#define SER_DEV_ZJVCPT_MEDIA_CH_ACCESS_CMD_SET								0x02


#define SER_DEV_VI_CAPTURE_SET_ADDR											227
#define SER_DEV_VI_CAPTURE_CMD_GET											0x01
#define SER_DEV_VI_CAPTURE_CMD_SET											0x02


#define SER_DEV_GPS_COMM_ACCESS_ADDR										228
#define SER_DEV_GPS_COMM_ACCESS_CMD_NATIVE_QUERY							0x01
#define SER_DEV_GPS_COMM_ACCESS_MSG_NATIVE									0x02
#define SER_DEV_GPS_COMM_ACCESS_MSG_SPECIFICATION							0x03
#define GPS_ACCESS_MSG_MEMBER_FRACTION_PRECISION_MASK						0xF0000000
#define GPS_ACCESS_MSG_MEMBER_FRACTION_PRECISION_SHIFT						28
#define GPS_ACCESS_MSG_MEMBER_MASK_TIME										0x0001
#define GPS_ACCESS_MSG_MEMBER_MASK_DATE										0x0002
#define GPS_ACCESS_MSG_MEMBER_MASK_POSITION									0x0004
#define GPS_ACCESS_MSG_MEMBER_MASK_SPEED									0x0008
#define GPS_ACCESS_MSG_MEMBER_MASK_COURSE									0x0010
#define GPS_ACCESS_MSG_MEMBER_MASK_ALTITUDE									0x0020


#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CONF_ADDR							229
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CMD_GET								0x01
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CMD_SET								0x02
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_AUTHID								0x69963CC3
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_DWM_KEY_LEN							8
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_DWM_CHAR_LEN						16
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_EN_MASKEX						0x00000001

#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MEDIA_CH_MK(vch,ach)				(((vch)&0xFF)|(((ach)&0xFF)<<8))
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MEDIA_VCH(mch)						((mch)&0xFF)
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MEDIA_ACH(mch)						(((mch)>>8)&0xFF)

#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_FIELD_ENC_MASK						0x00000001
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_WATER_MARK_MASK						0x00000002
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_SUBPIC_CLOSE_MASK					0x00000004
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_NALU_SPLIT_MASK						0x00000008
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_BIG_SEARCH_WND_MASK					0x00000010
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_VI_FPS_CTRL_MASK					0x00000020
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_VI_TV_STD_NTSC_MASK					0x00000040
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_AS_OVERLAY_MASK					0x00000080
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_CLOSE_SAD_MASK					0x00000100
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_MV_MODE_MASK						0x00000200
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_DELIGHT_MODE_MASK				0x00000400
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_MB_ALARM_MASK					0x00000800
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_MD_PIXEL_ALARM_MASK					0x00001000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_GRACEFUL_DISABLE_DYNAMIC_PARAM_MASK	0x00002000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_FORCE_DISABLE_DYNAMIC_PARAM_MASK	0x00004000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_VDEC_EN_MASK					0x00008000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_ADEC_EN_MASK					0x00010000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_DATA_EN_MASK					0x00020000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_WARN_LINK_EN_MASK				0x00040000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_CODEC_DECODER_EN_MASK				0x00080000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_TW2865_DVR_EN_MASK					0x00100000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_VEN_VBR_MASK						0x00200000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_ADAPTIVE_BANDWIDTH_MASK				0x00400000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_ADAPTIVE_KEEP_FPS_MASK				0x00800000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_UNRESTRICTED_DUAL_STREAM			0x01000000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_AUDIO_ACCESS_DISABLE_MASK			0x02000000
#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_SER_EMULATION_EN_MASK				0x04000000

#define SER_DEV_VIDEO_ENCODE_ADV_OPTION_VIDEO_ACCESS_DISABLE_MASK   		0x10000000


#define SER_DEV_ADDR_SERVER_CONF_ADDR						230
#define SER_DEV_ADDR_SERVER_CMD_GET							0x01
#define SER_DEV_ADDR_SERVER_CMD_SET							0x02
#define SER_DEV_ADDR_SERVER_PROTOCOL_MODE_PRIVATE			0x00
#define SER_DEV_ADDR_SERVER_PROTOCOL_MODE_PEANUTHULL		0x01
#define SER_DEV_ADDR_SERVER_WORK_MODE_NONE					0x00
#define SER_DEV_ADDR_SERVER_WORK_MODE_CLIENT				0x01
#define SER_DEV_ADDR_SERVER_WORK_MODE_SERVER				0x02
#define SER_DEV_ADDR_SERVER_WORK_MODE_CLIENT_AND_SERVER		0x03


#define SER_DEV_AUDIO_CODEC_CONFIG_ADDR						231
#define SER_DEV_AUDIO_CODEC_EN_MIC_INPUT_DWMASK				0x0001
#define SER_DEV_AUDIO_CODEC_EN_AEC_DWMASK					0x0002
#define SER_DEV_AUDIO_CODEC_EN_STEREO_DWMASK				0x0008
#define SER_DEV_AUDIO_CODEC_EN_SMOOTH_PLAY_DWMASK			0x0010
#define SER_DEV_AUDIO_CODEC_CH_WMASK						0x000F
#define SER_DEV_AUDIO_CODEC_FORMAT_WMASK					0x00F0
#define SER_DEV_AUDIO_CODEC_WRES_MK(ch,format)				(((ch)&0x0F)|(((format)&0x0F)<<4))
#define SER_DEV_AUDIO_CODEC_WRES_GET_CH(wres)				((wres)&0x0F)
#define SER_DEV_AUDIO_CODEC_WRES_GET_FM(wres)				(((wres)>>4)&0x0F)
#define SER_DEV_AUDIO_CODEC_CMD_GET							0x01
#define SER_DEV_AUDIO_CODEC_CMD_SET							0x02
#define SER_DEV_AUDIO_CODEC_CMD_APP							0x03

#define SER_DEV_DIDO_LLINKAGE_SET_ADDR			232
#define SER_DEV_DIDO_LLINKAGE_CMD_GET			0x01
#define SER_DEV_DIDO_LLINKAGE_CMD_SET			0x02
#define SER_DEV_DIDO_LLINKAGE_MAX_DO_NUM		8
#define SER_DEV_DIDO_LLINKAGE_MAX_VCH_NUM		4
#define SER_DEV_DIDO_LLINKAGE_NET_BREAK_VDI  	30
#define SER_DEV_DIDO_LLINKAGE_MD_VDI(ch)		(26+(ch))
#define SER_DEV_DIDO_LLINKAGE_OVERLAY_VDI(ch)	(22+(ch))
#define SER_DEV_DIDO_LLINKAGE_LOST_VDI(ch)		(18+(ch))
#define SER_DEV_DIDO_LLINKAGE_VIDEO_CAPTURE_VDO  6
#define SER_DEV_DIDO_LLINKAGE_VIDEO_RECORD_VDO   7


#define SER_DEV_ADV7171_CONFIG_ADDR				233
#define SER_DEV_ADV7171_CMD_GET					0x01
#define SER_DEV_ADV7171_CMD_SET					0x02

#define SER_DEV_VIDEO_OPTION_SET_ADDR			234
#define SER_DEV_VIDEO_OPTION_CMD_GET			0x01
#define SER_DEV_VIDEO_OPTION_CMD_SET			0x02
#define SER_DEV_VIDEO_OPTION_CMD_APP			0x03

#define SER_DEV_RC7222_CONFIG_ADDR				235
#define SER_DEV_RC7222_CMD_GET					0x01
#define SER_DEV_RC7222_CMD_SET					0x02
#define SER_DEV_RC7222_CMD_APP					0x03
#define SER_DEV_RC7222_REG_GET					0x04
#define SER_DEV_RC7222_REG_SET					0x05

#define RC7222_CTRL_SAVE_MASK					0x0000FFFF

#define RC7222_CTRL_SOFT_MANAGER_EN				0x00000001
#define RC7222_CTRL_LOOP_CUT_DISABLE			0x00000002
#define RC7222_CTRL_SELF_CHECK_EN				0x00000004
#define RC7222_CTRL_COL16_DISCARD_EN			0x00000008
#define RC7222_CTRL_FULL_DUPLEX_EN				0x00000010
#define RC7222_CTRL_MAC_PAUSE_EN				0x00000020
#define RC7222_CTRL_BIG_BUFER_EN				0x00000040
#define RC7222_CTRL_ADDR_FILT_EN				0x00000080
#define RC7222_CTRL_TIME_MOD_MASTER_EN			0x00000100
#define RC7222_CTRL_HDLC_RC7221_EN				0x00000200

#define RC7222_CTRL_NET_WAN_LOOP_EN				0x00010000
#define RC7222_CTRL_NET_LINE_TEST_EN			0x00020000
#define RC7222_CTRL_SOFT_RESET_REQ				0x00040000


#define SER_DEV_VIDEO_MD_CONFIG_ADDR			236
#define SER_DEV_VIDEO_MD_CMD_GET				0x01
#define SER_DEV_VIDEO_MD_CMD_SET				0x02
#define SER_DEV_VIDEO_MD_CMD_APP				0x03


#define SER_DEV_WEB_SERVER_ADDR					237
#define SER_DEV_WEB_SERVER_CMD_GET				0x01
#define SER_DEV_WEB_SERVER_CMD_SET				0x02
#define WEB_SERVER_VIDICON_PROTOCOL_PELCO_P		0x00
#define WEB_SERVER_VIDICON_PROTOCOL_PELCO_D		0x01
#define WEB_SERVER_VIDICON_PROTOCOL_SAMSUNG		0x02
#define WEB_SERVER_VIDICON_PROTOCOL_PHILIPS		0x03
#define	WEB_SERVER_VIDEO_SIZE_QSIF				0x00
#define	WEB_SERVER_VIDEO_SIZE_SIF				0x01
#define	WEB_SERVER_VIDEO_SIZE_HD1				0x02
#define	WEB_SERVER_VIDEO_SIZE_D1				0x03
#define	WEB_SERVER_VIDEO_SIZE_720P				0x04
#define	WEB_SERVER_VIDEO_SIZE_1080P				0x05

#define	WEB_SERVER_VIDEO_PROTOCOL_TCP			0x00
#define	WEB_SERVER_VIDEO_PROTOCOL_UDP			0x01
#define	WEB_SERVER_VIDEO_PROTOCOL_MC			0x02

#define	WEB_SERVER_GPS_WK_MODE_MASK				0x07
#define	WEB_SERVER_GPS_WK_MODE_GGA				0
#define	WEB_SERVER_GPS_WK_MODE_GLL				1
#define	WEB_SERVER_GPS_WK_MODE_RMC				2
#define	WEB_SERVER_GPS_MODE_NATIVE				0x08
#define	WEB_SERVER_GPS_MODE_MANUAL				0x10
#define	WEB_SERVER_GPS_MODE_EN_SYNC_SYS_TIME	0x20
#define	WEB_SERVER_GPS_WORK_ENABLE				0x40
#define	WEB_SERVER_GPS_MSG_FILTER_DISABLE		0x80

#define	WEB_SERVER_RECORD_MEDIA_TYPE_HD			0x00
#define	WEB_SERVER_RECORD_MEDIA_TYPE_USB		0x01
#define	WEB_SERVER_RECORD_MEDIA_TYPE_SD_MMC		0x02
#define	WEB_SERVER_RECORD_MEDIA_TYPE_NFS		0x03
#define	WEB_SERVER_RECORD_MEDIA_TYPE_ISCSI		0x04
#define	WEB_SERVER_RECORD_RED_ENABLE_MASK		0x01
#define	WEB_SERVER_RECORD_RED_NO_AUTO_MOUNT		0x02
#define	WEB_SERVER_RECORD_RED_FILE_IN_SIZE		0x04
#define	WEB_SERVER_RECORD_WRED_FILE_TIME_MASK	0x00FF
#define	WEB_SERVER_RECORD_CH_TYPE_DAY			0x00
#define	WEB_SERVER_RECORD_CH_TYPE_WEEK			0x01
#define	WEB_SERVER_RECORD_CH_TYPE_MONTHS		0x02
#define	WEB_SERVER_RECORD_CH_EVENT_MASK_MOTION	0x0100
#define	WEB_SERVER_RECORD_CH_RED_ENABLE_MASK	0x00000001
#define	WEB_SERVER_RECORD_CH_RED_TIME_SEG_MASK	0x00000002
#define	WEB_SERVER_RECORD_CH_RED_EVENT_MASK		0x00000004
#define	WEB_SERVER_RECORD_CH_RED_NOAUDIO_MASK	0x00000008


#define SER_DEV_VIDEO_WARN_ADDR					238
#define SER_DEV_VIDEO_WARN_CMD_GET				0x01
#define SER_DEV_VIDEO_WARN_CMD_NOTIFY			0x02
#define SER_DEV_VIDEO_WARN_TYPE_OCCUR			0x01
#define SER_DEV_VIDEO_WARN_TYPE_CANCEL			0x02
#define SER_DEV_VIDEO_WARN_TYPE_STATUS			0x03
#define SER_DEV_VIDEO_WARN_EVENT_OVERLAY		0x01
#define SER_DEV_VIDEO_WARN_EVENT_LOST			0x02
#define SER_DEV_VIDEO_WARN_EVENT_MOTION_DETECT	0x04


#define SER_DEV_VIDEO_OVERLAY_CONFIG_ADDR		239
#define SER_DEV_VIDEO_OVERLAY_CONFIG_GET		0x01
#define SER_DEV_VIDEO_OVERLAY_CONFIG_SET		0x02
#define SER_DEV_VIDEO_OVERLAY_CONFIG_APP		0x03


#define SER_DEV_NET_SWITCH_CONFIG_ADDR			240
#define SER_DEV_NET_SWITCH_CONFIG_GET			0x01
#define SER_DEV_NET_SWITCH_CONFIG_SET			0x02


#define SER_SYS_OSD_CTRL_ADDR					241


#define SER_SYS_ADV_NET_CONFIG_ADDR				242
#define SER_SYS_ADV_NET_CONFIG_GET				0x01
#define SER_SYS_ADV_NET_CONFIG_SET				0x02
#define SYS_ADV_NET_IF_TYPE_STD					0x00
#define SYS_ADV_NET_IF_TYPE_DHCP				0x01
#define SYS_ADV_NET_IF_TYPE_PPPOE				0x02
#define SYS_ADV_NET_IF_TYPE_GPRS				0x03
#define SYS_ADV_NET_IF_TYPE_PPP					0x04


#define SER_DIDO_CTRL_CONFIG_ADDR				243
#define SER_DIDO_CTRL_CONFIG_CMD_GET_CON		0x01
#define SER_DIDO_CTRL_CONFIG_CMD_SET_CON		0x02
#define SER_DIDO_CTRL_CONFIG_CMD_GET_WARN		0x03
#define SER_DIDO_CTRL_CONFIG_CMD_SET_CTRL		0x04
#define SER_DIDO_CTRL_CONFIG_CMD_GET_CTRL		0x05
#define SER_DIDO_CTRL_CONFIG_ASYNC_WARN_DISABLE	0x01
#define SER_DIDO_CTRL_CONFIG_SMOG_ENABLE		0x02
#define SER_DIDO_CTRL_CONFIG_DO_AUTO_SAVE		0x04
#define SER_DIDO_CTRL_CONFIG_AIR_CON_TYPE1_GET(dwReservered)		((dwReservered)&0x00FF)
#define SER_DIDO_CTRL_CONFIG_AIR_CON_TYPE2_GET(dwReservered)		(((dwReservered)>>8)&0x00FF)
#define SER_DIDO_CTRL_CONFIG_MK_DW_RES(AirConType1,AirConType2)		(((AirConType1)&0xFF)|(((AirConType2)&0xFF)<<8))


#define SER_ENCODER_VIDEO_ADV_SET_ADDR			244
#define SER_PROTOCOL_DECODER_SET_ADDR			245
#define SER_DECODER_OSD_CTRL_ADDR				246
#define SER_DEV_REAL_TIME_CON_ADDR				247
#define SER_NET_MANAGER_CON_ADDR				248


#define SER_TRANSMIT_DECODER_ADDR								249
#define SER_TRANSMIT_CONFIG_CMD_GET								0x01
#define SER_TRANSMIT_CONFIG_CMD_SET								0x02
#define SER_TRANSMIT_CONFIG_OPT_MASK_FASTSWITCH					0x01
#define SER_TRANSMIT_CONFIG_OPT_MASK_SMOOTH						0x02
#define SER_TRANSMIT_CONFIG_OPT_MASK_SYNC						0x04
#define SER_TRANSMIT_CONFIG_OPT_MASK_TALK_BACK					0x08
#define SER_TRANSMIT_CONFIG_OPT_MASK_SER_EMULATION				0x10
#define SER_TRANSMIT_CONFIG_OPT_MASK_DEC_OUTPUT_MODE			0x60
#define SER_TRANSMIT_CONFIG_OPT_MASK_DEC_OUTPUT_NO_PIC_KEEP		0x80
#define SER_TRANSMIT_CONFIG_OPTEX_MASK_TRANSMIT					0x01
#define SER_TRANSMIT_CONFIG_OPTEX_MASK_DEC_OUTPUT_MODE_HIGH		0x06
#define SER_TRANSMIT_SET_DEC_OUTPUT_MODE(opt,optex,mode)		do{(opt)=(((opt)&(~SER_TRANSMIT_CONFIG_OPT_MASK_DEC_OUTPUT_MODE))|(((mode)<<5)&SER_TRANSMIT_CONFIG_OPT_MASK_DEC_OUTPUT_MODE));(optex)=(((optex)&(~SER_TRANSMIT_CONFIG_OPTEX_MASK_DEC_OUTPUT_MODE_HIGH))|(((mode)>>1)&SER_TRANSMIT_CONFIG_OPTEX_MASK_DEC_OUTPUT_MODE_HIGH));}while(0)
#define SER_TRANSMIT_GET_DEC_OUTPUT_MODE(opt,optex)				((((opt)&SER_TRANSMIT_CONFIG_OPT_MASK_DEC_OUTPUT_MODE)>>5)|(((optex)&SER_TRANSMIT_CONFIG_OPTEX_MASK_DEC_OUTPUT_MODE_HIGH)<<1))
#define SER_TRANSMIT_DEC_OUTPUT_MODE_2HD						0
#define SER_TRANSMIT_DEC_OUTPUT_MODE_4SD						1
#define SER_TRANSMIT_DEC_OUTPUT_MODE_10SD						2
#define SER_TRANSMIT_DEC_OUTPUT_MODE_20SD						3
#define SER_TRANSMIT_DEC_OUTPUT_MODE_1UHD						4


#define SER_TRANSPARENCY_ENCODER_ADDR			250
#define SER_TRANSPARENCY_DECODER_ADDR			251
#define SER_MB86391_ADDR						252
#define SER_SAA7113_ADDR						253
#define	INOUTCTRLADDR							254




#define START_VIDEO_GET_GOPSIZE_FROM_FORMAT(format)							(((format)>>16)&0xFFFF)
#define START_VIDEO_GET_FORMAT_FROM_FORMAT(format)							((format)&0xFFFF)
#define START_VIDEO_MAKE_FORMAT(format,gopsize)								(((format)&0xFFFF)|((gopsize)<<16))

#define CONFIG_VIDEO_MAKE_QUALITY(quality,framerate,gopsize,policy)			(((quality)&0xFF)|((((framerate)&0x3F)|(((policy)&0x10)<<3)|(((policy)&0x01)<<6))<<8)|(((gopsize)&0xFFFF)<<16))
#define CONFIG_VIDEO_GET_QUALITY(quality)									((quality)&0xFF)
#define CONFIG_VIDEO_GET_FRAME_RATE(quality)								(((quality)>>8)&0x3F)
#define CONFIG_VIDEO_GET_GOPSIZE(quality)									(((quality)>>16)&0xFFFF)
#define CONFIG_VIDEO_GET_POLICY(quality)									(((((quality)>>8)&0x80)>>3)|((((quality)>>8)&0x40)>>6))

#define CONFIG_VIDEO_GET_CH_ID_FROM_FORMAT(format)							(((format)>>24)&0xFF)
#define CONFIG_VIDEO_GET_ACH_ID_FROM_FORMAT(format)							(((format)>>16)&0xFF)
#define CONFIG_VIDEO_GET_FORMAT_FROM_FORMAT(format)							((format)&0xFFFF)
#define CONFIG_VIDEO_MAKE_FORMAT(format,ChID,AudioChID)						((((ChID)&0xFF)<<24)|(((AudioChID)&0xFF)<<16)|((format)&0xFFFF))

#define MAKE_RECORD_CH_FROM_VIRTUAL_CH(vch)									((vch)>>1)



/*协议通讯命令码*/
#define COMM_STARTVIDEO							0x01
#define COMM_STOPVIDEO							0x02
#define COMM_SETHW_SA7113						0x03
#define COMM_SETHW_W99200						0x04
#define COMM_GETHW_SA7113						0x06
#define COMM_GETHW_W99200						0x07
#define COMM_SETIP								0x08
#define COMM_GETIP								0x09
#define COMM_SETHW_ETHADDR						0x0A
#define COMM_GETHW_ETHADDR						0x0B
#define COMM_RESET								0x0C
#define COMM_USER_LOGIN							0x0D			
#define COMM_USER_LOGINEX						0x0E
#define COMM_GET_USER_LOGIN_INFO				0x0F

#define COMM_GET_VIDEO_MULTICAST				0x18
#define COMM_GET_RUN_STATUS_INFO				0x19
#define COMM_GET_RUN_STATUS_INFOEX				0x1A
#define DEV_RUN_STATUS_MSG_VER1					0x01071121
#define DEV_RUN_STATUS_MSG_VER2					0x02090710
#define DEV_RUN_STATUS_MSG_VER3   				0x03120507
#define DEV_RUN_STATUS_MSG_VER4   				0x04121010
#define DEV_RUN_STATUS_MSG_VER6   				0x06121211
#define DEV_RUN_STATUS_MSG_VER7   				0x07141009
#define DEV_RUN_STATUS_MSG_VER8   				0x08160923
#define CURR_DEV_RUN_STATUS_MSG_VER				DEV_RUN_STATUS_MSG_VER8
#define COMM_REQ_CAPTURE_PICTURE				0x1E
#define COMM_ACK_CAPTURE_PICTURE				0x1F
#define CAPTURE_PICTURE_NALU_SIZE				(4*1024)
#define COMM_GETHW_VIDEO_FORMAT					0x20
#define COMM_REQ_KEY_FRAME						0x21

#define COMM_PUT_SERDATA						0x25
#define COMM_GET_SERDATA						0x26
#define COMM_OPEN_SER							0x27
#define COMM_CLOSE_SER							0x28
#define COMM_SETHW_SER							0x29
#define COMM_GETHW_SER							0x2A
#define COMM_WARN_DI_LINKAGE_DO					0x2B
#define COMM_GETHW_SER_EX						0x2C

#define COMM_QUERY_USER_INFO					0x31
#define COMM_MODIFY_USER_INFO					0x32
#define COMM_VALIDATE_USER_INFO					0x33

#define COMM_READ_COMMON_BUF					0x41
#define COMM_WRITE_COMMON_BUF					0x42

#define COMM_READ_AVSU_CONF						0x51
#define COMM_WRITE_AVSU_CONF					0x52

#define COMM_CONFIG_E1_CHANNEL					0x61
#define COMM_GET_E1CHANNEL_CON					0x62
#define COMM_SET_REMOTE_NETMODE					0x63	
#define COMM_GET_REMOTE_NETMODE					0x64

#define SER_DEV_VS2008_CONFIG_ADDR				0x6A
#define SER_DEV_VS2008_CONFIG_CMD_GET			0x01
#define SER_DEV_VS2008_CONFIG_CMD_SET			0x02


#define COMM_START_AUDIO						0x71
#define COMM_STOP_AUDIO							0x72
#define	COMM_START_TALK_BACK					0x73
#define	COMM_STOP_TALK_BACK						0x74
#define COMM_REQ_VIDEO_PLAY						0x75
#define COMM_ACK_VIDEO_PLAY						0x76

#define COMM_GET_DEVNETID_LIST					0x80
#define COMM_GETIPEX							0x81
#define	COMM_GETHW_ETHADDREX					0x82
#define COMM_DYNAMIC_SWITCH_AIM					0x83
#define DYNAMIC_SWITCH_ID_TO_VIDEO_ID(ID)		((ID)&0x0000FFFF)
#define DYNAMIC_SWITCH_ID_TO_AUDIO_ID(ID)		(((ID)>>16)&0x0000FFFF)
#define DYNAMIC_SWITCH_MAKE_ID(AudioID,VideoID)	((((AudioID)&0x0000FFFF)<<16)|((VideoID)&0x0000FFFF))

#define COMM_TXD_TRANSPARENCY_CTRL				0x84
#define COMM_REMOTE_PROGLOAD					0x85
#define COMM_REMOTE_PROGLOAD_ACK				0x86
#define COMM_REMOTE_VIDEO_RESET					0x87
#define COMM_GETIPNEW							0x88
#define COMM_RESET_CONFIG      					0x89


#define COMM_SET_LOCAL_SERCON_EX				0x90
#define COMM_SET_LOCAL_SERCON					0x91
#define COMM_GET_LOCAL_SERCON					0x92
#define COMM_SET_LOCAL_NETMODE					0x93
#define COMM_GET_LOCAL_NETMODE					0x94
#define COMM_SET_LOCAL_USER						0x95
#define COMM_GET_LOCAL_USER						0x96
#define COMM_SET_LOCAL_VIDEOAUDIO				0x97
#define COMM_GET_LOCAL_VIDEOAUDIO				0x98
#define COMM_SET_LOCAL_SERTIME					0x99
#define COMM_GET_LOCAL_SERTIME					0x9A
#define COMM_SET_WEB_SERVER_CONFIG				0x9B
#define COMM_GET_WEB_SERVER_CONFIG				0x9C
#define COMM_SET_FIRE_SECURITY_CONF				0x9D
#define COMM_GET_FIRE_SECURITY_CONF				0x9E
#define COMM_GET_LOCAL_SERCON_EX				0x9F



#define COMM_ADDRSERVER_AUTH_NOTIFY				0xA0
#define COMM_ADDRSERVER_AUTH_REQ				0xA1
#define COMM_ADDRSERVER_AUTH_ACK				0xA2
#define COMM_ADDRSERVER_LOGIN_REQ				0xA3
#define COMM_ADDRSERVER_LOGIN_ACK				0xA4

#define COMM_APP_VIDEO_CONFIG					0xB0
#define COMM_CAPTURE_PICTURE_SAVE				0xB1
#define COMM_RECORD_RUN_CTRL					0xB2
#define COMM_RECORD_GET_STATUS					0xB3
#define COMM_RECORD_DOWNLOAD_LIST_REQ			0xB4
#define COMM_RECORD_DOWNLOAD_LIST_ACK			0xB5
#define COMM_RECORD_DOWNLOAD_FILE_REQ			0xB6
#define COMM_RECORD_DOWNLOAD_FILE_ACK			0xB7

#define COMM_SET_MEGAEYES_CONFIG				0xC0
#define COMM_GET_MEGAEYES_CONFIG				0xC1

#define COMM_GET_PCM_DEV_CLASS_TAB    			0xC8
#define COMM_GET_PCM_DEV_TYPE_TAB    			0xC9
#define COMM_GET_PCM_DEV_INSTANCE_TAB   		0xCA
#define COMM_SET_PCM_DEV_INSTANCE_TAB   		0xCB
#define COMM_GET_PCM_DEV_PORT_CONF_TAB 			0xCC


#define COMM_CONFIG_DATABASE_DOWNLOAD_REQ  		0xD0
#define COMM_CONFIG_DATABASE_DOWNLOAD_ACK 		0xD1
#define COMM_CONFIG_DATABASE_UPLOAD_REQ   		0xD2
#define COMM_CONFIG_DATABASE_UPLOAD_ACK   		0xD3

#define COMM_FIRMWARE_UPDATE_REQ    			0xD4
#define COMM_FIRMWARE_UPDATE_ACK    			0xD5

#define COMM_PCM_GEN_GET_DEV_DATA_DESC_REQ		0xE0
#define COMM_PCM_GEN_GET_DEV_DATA_DESC_ACK		0xE1
#define COMM_PCM_GEN_GET_DEV_RO_DATA_REQ		0xE2
#define COMM_PCM_GEN_GET_DEV_RO_DATA_ACK		0xE3
#define COMM_PCM_GEN_GET_DEV_RW_DATA_REQ		0xE4
#define COMM_PCM_GEN_GET_DEV_RW_DATA_ACK		0xE5
#define COMM_PCM_GEN_SET_DEV_RW_DATA_REQ		0xE6
#define COMM_PCM_GEN_SET_DEV_RW_DATA_ACK		0xE7
#define PCM_GEN_ACCESS_DEV_DATA_BUF_SIZE		(4*1024)








#define DEV_TYPE_SYS_MASK					0xFF000000	// 系统类型掩码
#define DEV_TYPE_SYS_ORI					0x00000000	// 原始系统类型
#define DEV_TYPE_SYS_ENWC					0x01000000	// E网智通系统类型

#define DEV_TYPE_COMM_MASK					0x00FF0000	// 通信接口掩码
#define DEV_TYPE_COMM_EHERNET				0x00010000	// 以太通信接口
#define DEV_TYPE_COMM_E1					0x00020000	// E1通信接口
#define DEV_TYPE_COMM_DE1					0x00030000	// 双路E1通信接口

#define DEV_TYPE_FUNCEX_MASK				0x0000FF00	// 辅助功能掩码
#define DEV_TYPE_FUNCEX_MPEG1				0x00000100	// 辅助功能, MPEG-1
#define DEV_TYPE_FUNCEX_MPEG2				0x00000200	// 辅助功能, MPEG-2
#define DEV_TYPE_FUNCEX_MPEG4				0x00000400	// 辅助功能, MPEG-4
#define DEV_TYPE_FUNCEX_TSMULTIPLEX			0x00000500	// 辅助功能, 时隙复用
#define DEV_TYPE_FUNCEX_TRANSPARENCE		0x00000600	// 辅助功能, 透明串口
#define DEV_TYPE_FUNCEX_PROTOCOL_DECODER	0x00000700	// 辅助功能, 协议转换器
#define DEV_TYPE_FUNCEX_H264				0x00000800	// 辅助功能, H264

#define DEV_TYPE_FUNC_MASK					0x000000FF	// 主功能掩码
#define DEV_TYPE_FUNC_ENCODER				0x00000001	// 主功能, 编码器
#define DEV_TYPE_FUNC_DECODER				0x00000002	// 主功能, 解码器
#define DEV_TYPE_FUNC_DEVSERVER				0x00000003	// 主功能, 设备服务器
#define DEV_TYPE_FUNC_BOOTLOADER			0x00000004	// 主功能, 启动加载器
#define DEV_TYPE_FUNC_NETCOM				0x00000005	// 主功能, 串口服务器
#define DEV_TYPE_FUNC_PROTOCOL_DECODER		0x00000006	// 主功能,协议转换器

#define DEV_TYPE_FUNCEX_PM5000    			0x00000B00 // 辅助功能, PM5000

#define WORLD_TIMEZONE_MIN					(-12)
#define WORLD_TIMEZONE_MAX					(+13)
#define CHINA_STD_TIMEZONE					8
#define TIMEZONE_CUSTOM_GMT_DEC_03_30		24
#define TIMEZONE_CUSTOM_GMT_ADD_03_30		25
#define TIMEZONE_CUSTOM_GMT_ADD_04_30		26
#define TIMEZONE_CUSTOM_GMT_ADD_05_30		27
#define TIMEZONE_CUSTOM_GMT_ADD_05_45		28
#define TIMEZONE_CUSTOM_GMT_ADD_06_30		29
#define TIMEZONE_CUSTOM_GMT_ADD_09_30		30


/*
 ************************************************************************************************************************************************************************
 * 数据类型定义
 ************************************************************************************************************************************************************************
*/

typedef struct tMMNET_HEADER
{
	U8  	nType;
	U8		bReserved;
	U16		wReserved1;
	U32 	dwLength;
	U32     SrcIP; 
	U32     DestIP;
	U32     dwSeqNum;
	U32  	dwOpCode;
	U32     dwFormat;
	U32 	dwDevID;
	U32 	dwReserved;
	U16 	CheckSum;
	U16		wReserved2;
}MMNET_HEADER,*PMMNET_HEADER;








typedef struct tVIDEO_MULTICAST_ADDR 
{
	U32		MultiCastIP;
	U16		MultiCastPort;
	U16		wReseved;
}VIDEO_MULTICAST_ADDR,*PVIDEO_MULTICAST_ADDR;

typedef struct tDYNAMICSWITCHAIM
{
	U32		DestDevIPID;
}DYNAMICSWITCHAIM,*PDYNAMICSWITCHAIM;

typedef struct tUSERLOGINEX				
{
	U8	Level;
	U32	UserID;
	U32	IPAddr;
}USERLOGINEX,*PUSERLOGINEX;

typedef struct tUSERLOGININFO
{
	U8	Level;
	U32	UserID;
	U32	IPAddr;
	U32 Time;
}USERLOGININFO,*PUSERLOGININFO;
typedef struct tUSERLOGINTABLE
{
	U32				CurrUserNum;
	USERLOGININFO	Table[MAX_CLIENT_NUM];
}USERLOGINTABLE,*PUSERLOGINTABLE;

typedef struct tVIDEOCONF
{
	U32		Format;
	U8		BiteRatePolicy;
	U8		Quality;
	U8		FrameRate;
	U8		bRestart;
	U32		BitRate;
	U32		NetMode;
}VIDEOCONF,*PVIDEOCONF;

typedef struct tVIDEO_FORMAT
{
	U32		dwFormat;
	U32		dwBitRate;
	U32		dwGopSize;
	U16		wFrameRate;
	U16		wQuality;
	U16		wPolicy;
	U16		wReserved;
}HW_VIDEO_FORMAT,*PHW_VIDEO_FORMAT;

typedef struct tIPCONFCMD
{
	U32		Version;
	U32     IPAddr;
	U32     IPMask;
	U32     GateWay;
	U8		EthAddr[6];
	U32		LiveTime;
}IPCONFCMD,*PIPCONFCMD;

typedef struct tIPCONFCMDEX
{
	U32		Version;
	U32     IPAddr;
	U32     IPMask;
	U32     GateWay;
	U8		EthAddr[6];
	U32		LiveTime;
	U32		DevType;
}IPCONFCMDEX,*PIPCONFCMDEX;

typedef struct tIPCONFCMDNEW
{
	U32		Version;
	U32     IPAddr;
	U32     IPMask;
	U32     GateWay;
	U8		EthAddr[6];
	U32		LiveTime;
	U32		DevType;
	U8		Text[256];
}IPCONFCMDNEW,*PIPCONFCMDMEW;

typedef struct tMACCONFCMD
{
	U8		OldAddr[6];
	U8		NewAddr[6];
}MACCONFCMD,*PMACCONFCMD;

typedef struct tSERIALPARAM
{
	U32			unit;
	S32			BaudRate;
	S32			DataBits;
	S32			StopBits;
	S32			parity;
	U32			Status;
	U32			WorkMode;
}SERIALPARAM,*PSERIALPARAM;
typedef struct tSERIALSETINFO
{
	U32			UnitNum;
	SERIALPARAM pParam[MAX_SERIAL_NUM];
}SERIALSETINFO,*PSERIALSETINFO;
typedef struct tSERIALSETINFO_EX
{
	U32			UnitNum;
	SERIALPARAM pParam[MAX_SERIAL_NUM_EX];
}SERIALSETINFO_EX,*PSERIALSETINFO_EX;

typedef struct tSERCONFIG
{
	U16		WorkMode;
	U16		BaudRate;
	U8		SerUnit;
	U8		Parity;
	U8		DataBit;
	U8		StopBit;
}SERCONFIG,*PSERCONFIG;
typedef struct tSERCONFIGCMD
{
	U16  		LocalSerNum;
	U16  		RemoteSerNum;
	SERCONFIG  	LocalSerTable[MAX_SERIAL_NUM];
	SERCONFIG  	RemoteSerTable[MAX_SERIAL_NUM];
}SERCONFIGCMD,*PSERCONFIGCMD;

typedef struct tSERTIMECONFIG
{
	U16		ResponseTime;
	U16		RecvTimeout;
}SERTIMECONFIG,*PSERTIMECONFIG;
typedef struct tSERTIMECONFIGCMD
{
	U32				SerNum;
	SERTIMECONFIG	SerTimeTable[MAX_SERIAL_NUM];		
}SERTIMECONFIGCMD,*PSERTIMECONFIGCMD;
typedef struct tSERCONFIG_EX
{
	U16		WorkMode;
	U16		wReserved;
	U32		BaudRate;
	U8		SerUnit;
	U8		Parity;
	U8		DataBit;
	U8		StopBit;
	U16		ResponseTime;
	U16		RecvTimeout;
}SERCONFIG_EX,*PSERCONFIG_EX;
typedef struct tSERCONFIGCMD_EX
{
	U16  			LocalSerNumEx;
	U16  			RemoteSerNumEx;
	SERCONFIG_EX  	LocalSerTableEx[MAX_SERIAL_NUM_EX];
	SERCONFIG_EX  	RemoteSerTableEx[MAX_SERIAL_NUM_EX];
}SERCONFIGCMD_EX,*PSERCONFIGCMD_EX;

typedef struct tNETMODECONCMD
{
	U32  	DestDevIPID;
	U32  	NetType;
}NETMODECONCMD,*PNETMODECONCMD;

typedef struct tLOCALUSERCONCMD
{
	U32		UserLevel;
}LOCALUSERCONCMD,*PLOCALUSERCONCMD;

typedef struct tLOCALVIDEOAUDIOCONCMD
{
	U32			AudioMode;
	U32			VideoFormat;
	U32  		VideoBitRate;
	U32  		VideoQuality;	
}LOCALVIDEOAUDIOCONCMD,*PLOCALVIDEOAUDIOCONCMD;

typedef struct tREMOTENETMODECONCMD   
{
	U32			AudioMode;
	U32			NetMode;
}REMOTENETMODECONCMD,*PREMOTENETMODECONCMD;


typedef struct tDEV_USER_STATUS_INFOEX
{
	DWORD		dwUserID;
	DWORD		dwUserLevel;
	DWORD		dwUserIP;
	DWORD		dwVideoIP;
	WORD		wVideoPort;
	WORD		wAudioPort;
	DWORD		dwAudioIP;
	WORD		wCom1BaudRate;
	WORD		wCom2BaudRate;
	WORD		wAudioID;
	WORD		wVideoID;
}DEV_USER_STATUS_INFOEX,*PDEV_USER_STATUS_INFOEX;
typedef struct tDEV_USER_STATUS_INFONEW
{
	DWORD		dwUserID;
	DWORD		dwUserLevel;
	DWORD		dwUserIP;
	DWORD		dwVideoIP;
	WORD		wVideoPort;
	WORD		wAudioPort;
	DWORD		dwAudioIP;
	WORD		wCom1BaudRate;
	WORD		wCom2BaudRate;
	WORD		wCom3BaudRate;
	WORD		wCom4BaudRate;
	WORD		wAudioID;
	WORD		wVideoID;
}DEV_USER_STATUS_INFONEW,*PDEV_USER_STATUS_INFONEW;
typedef struct tSYS_PCI_STATUS_INFO
{
	DWORD		dwSendFailCount;
	DWORD		dwSendReadyCount;
	DWORD		dwTrySendCount;
	DWORD		dwDmaSendTimeoutCount;
	DWORD		dwMsgSendTimeoutCount;
	DWORD		dwRecvCount;
	DWORD		dwRecvValidCount;
	DWORD		dwRecvOutOfOrderCount;
	DWORD		dwRecvRepeatCount;
}SYS_PCI_STATUS_INFO,*PSYS_PCI_STATUS_INFO;
typedef struct tDEV_RUN_STATUS_VER1
{
	DWORD		dwDevType;
	DWORD		dwDevIP;
	DWORD		dwFirmwareVer;
	DWORD		dwSysRunTime;
	DWORD		dwSysRealTime;			/*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	DWORD		dwCpuOccupancy;
	DWORD		dwWebServerRebootCount;
	BYTE		strDevHwAddr[32];

	DWORD		dwEthRxPackets;
	DWORD		dwEthTxPackets;
	DWORD		dwEthRxErrors;
	DWORD		dwEthTxErrors;
	DWORD		dwEthRxDropped;
	DWORD		dwEthTxDropped;
	DWORD		dwEthRxMulticast;
	DWORD		dwEthCollisions;

	DWORD		dwDataDiCurrVal;
	DWORD		dwDataDoCurrVal;
	DWORD		dwDataWarnStatus;
	DWORD		dwDataWarnMask;
	DWORD		dwDataWarnDiStdVal;

	DWORD		dwSerCurrChNum;
	DWORD		dwSerTxCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwSerRxCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwSerErrorCount[SYS_MEDIA_STREAM_MAX_CH_NUM];

	DWORD		dwAudioEncCurrChNum;
	DWORD		dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwAudioDecCurrChNum;
	DWORD		dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_CH_NUM];

	DWORD		dwVideoEncCurrChNum;
	DWORD		dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_CH_NUM];

	DWORD		dwVideoDecCurrChNum;
	DWORD		dwVideoDecChOverCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoDecChLostCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoDecChRebootCount[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoDecChIsLive[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoDecChBitRate[SYS_MEDIA_STREAM_MAX_CH_NUM];
	DWORD		dwVideoDecChFrameRate[SYS_MEDIA_STREAM_MAX_CH_NUM];
	
	DWORD		CurrUserCount;
	DEV_USER_STATUS_INFOEX	UserTable[MAX_CLIENT_NUM];
}DEV_RUN_STATUS_VER1,*PDEV_RUN_STATUS_VER1;
typedef struct tDEV_RUN_STATUS_VER2
{
	DWORD		dwDevType;
	DWORD		dwDevIP;
	DWORD		dwFirmwareVer;
	DWORD		dwSysRunTime;
	DWORD		dwSysRealTime;			/*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	DWORD		dwCpuOccupancy;
	DWORD		dwWebServerRebootCount;
	BYTE		strDevHwAddr[32];

	DWORD		dwEthRxPackets;
	DWORD		dwEthTxPackets;
	DWORD		dwEthRxErrors;
	DWORD		dwEthTxErrors;
	DWORD		dwEthRxDropped;
	DWORD		dwEthTxDropped;
	DWORD		dwEthRxMulticast;
	DWORD		dwEthCollisions;

	DWORD		dwDataDiCurrVal;
	DWORD		dwDataDoCurrVal;
	DWORD		dwDataWarnStatus;
	DWORD		dwDataWarnMask;
	DWORD		dwDataWarnDiStdVal;

	DWORD		dwSerCurrChNum;
	DWORD		dwSerTxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwSerRxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwSerErrorCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];

	DWORD		dwAudioEncCurrChNum;
	DWORD		dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwAudioDecCurrChNum;
	DWORD		dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];

	DWORD		dwVideoEncCurrChNum;
	DWORD		dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];

	DWORD		dwVideoDecCurrChNum;
	DWORD		dwVideoDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoDecChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoDecChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoDecChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoDecChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DWORD		dwVideoDecChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	
	DWORD		CurrUserCount;
	DEV_USER_STATUS_INFONEW	UserTable[MAX_CLIENT_NUM];
	SYS_PCI_STATUS_INFO		PciHostStatus;
	SYS_PCI_STATUS_INFO		PciDevStatus;
}DEV_RUN_STATUS_VER2,*PDEV_RUN_STATUS_VER2;



typedef struct __attribute__((packed)) tDEV_USER_STATUS_INFONEWEX
{
	 DWORD  dwUserID;
	 DWORD  dwUserLevel;
	 DWORD  dwUserIP;
	 DWORD  dwVideoIP;
	 WORD	wVideoPort;
	 WORD	wAudioPort;
	 DWORD  dwAudioIP;
	 WORD	wAudioID;
	 WORD	wVideoID;
	 WORD	wCom1BaudRate;
	 WORD	wCom2BaudRate;
	 WORD	wCom3BaudRate;
	 WORD	wCom4BaudRate;
	 WORD	wCom5BaudRate;
	 WORD	wCom6BaudRate;
	 WORD	wCom7BaudRate;
}DEV_USER_STATUS_INFONEWEX,*PDEV_USER_STATUS_INFONEWEX;

typedef struct __attribute__((packed)) tDEV_USER_STATUS_INFO_V7
{
	 DWORD  dwUserID;
	 DWORD  dwUserLevel;
	 DWORD  dwUserIP;
	 DWORD  dwVideoIP;
	 WORD	wVideoPort;
	 WORD	wAudioPort;
	 DWORD  dwAudioIP;
	 WORD	wAudioID;
	 WORD	wVideoID;
	 WORD	wCom1BaudRate;
	 WORD	wCom2BaudRate;
	 WORD	wCom3BaudRate;
	 WORD	wCom4BaudRate;
	 WORD	wCom5BaudRate;
	 WORD	wCom6BaudRate;
	 WORD	wCom7BaudRate;
	 WORD	wCom8BaudRate;
	 WORD	wCom9BaudRate;
}DEV_USER_STATUS_INFO_V7,*PDEV_USER_STATUS_INFO_V7;

typedef struct tSYS_PM5000_PRIVATE_STATUS
{
	 BYTE  IsE1ConEnable;
	 BYTE  IsMediaConEnable;
	 BYTE  IsBCM_Enable;
	 BYTE  MemOccupancy;
	 BYTE  FlashOccupancy;
	 BYTE  EepromOccupancy;
	 BYTE  IsWatchdogEnable;
	 BYTE  DiskOccupancy;
	 BYTE  E1InOccupancy;
	 BYTE  E1OutOccupancy;
	 BYTE  EthOccupancy;
	 BYTE  IsE1_LOS;
	 BYTE  IsE1_LOF;
	 BYTE  IsEthLink;
	 BYTE  IsEthFullDuplex;
	 BYTE  EthSpeedMode;
}SYS_PM5000_PRIVATE_STATUS,*PSYS_PM5000_PRIVATE_STATUS;

typedef struct __attribute__((packed)) tSYS_PM5000_PRIVATE_STATUSEX
{
	 BYTE  IsE1NetBridgeEnable;
	 BYTE  IsE1ComEnable;
	 BYTE  IsMediaConEnable;
	 BYTE  IsBCM_Enable;
	 BYTE  MemOccupancy;
	 BYTE  FlashOccupancy;
	 BYTE  EepromOccupancy;
	 BYTE  IsWatchdogEnable;
	 BYTE  DiskOccupancy;
	 BYTE  E1InOccupancy;
	 BYTE  E1OutOccupancy;
	 BYTE  EthOccupancy;
	 BYTE  IsE1_LOS;
	 BYTE  IsE1_LOF;
	 BYTE  IsEthLink;
	 BYTE  IsEthFullDuplex;
	 BYTE  EthSpeedMode;
}SYS_PM5000_PRIVATE_STATUSEX,*PSYS_PM5000_PRIVATE_STATUSEX;

typedef struct __attribute__((packed)) tSYS_PM5000_PRIVATE_STATUS_V7
{
	 BYTE  MemOccupancy;
	 BYTE  FlashOccupancy;
	 BYTE  EepromOccupancy;
	 BYTE  IsWatchdogEnable;
	 BYTE  DiskOccupancy;
	 BYTE  EthOccupancy;
	 BYTE  IsEthLink;
	 BYTE  IsEthFullDuplex;
	 BYTE  EthSpeedMode;
}SYS_PM5000_PRIVATE_STATUS_V7,*PSYS_PM5000_PRIVATE_STATUS_V7;


typedef struct __attribute__((packed)) tDEV_RUN_STATUS_VER3
{
	 DWORD  dwDevType;
	 DWORD  dwDevIP;
	 DWORD  dwFirmwareVer;
	 DWORD  dwSysRunTime;
	 DWORD  dwSysRealTime;   /*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	 DWORD  dwCpuOccupancy;
	 DWORD  dwWebServerRebootCount;
	 BYTE   strDevHwAddr[32];  
	 DWORD  dwEthRxPackets;
	 DWORD  dwEthTxPackets;
	 DWORD  dwEthRxErrors;
	 DWORD  dwEthTxErrors;
	 DWORD  dwEthRxDropped;
	 DWORD  dwEthTxDropped;
	 DWORD  dwEthRxMulticast;
	 DWORD  dwEthCollisions;  
	 DWORD  dwDataDiCurrVal;
	 DWORD  dwDataDoCurrVal;
	 DWORD  dwDataWarnStatus;
	 DWORD  dwDataWarnMask;
	 DWORD  dwDataWarnDiStdVal;  
	 DWORD  dwSerCurrChNum;
	 DWORD  dwSerTxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerErrorCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwAudioEncCurrChNum;
	 DWORD  dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecCurrChNum;
	 DWORD  dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwVideoEncCurrChNum;
	 DWORD  dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  CurrUserCount;
	 DEV_USER_STATUS_INFONEWEX   UserTable[MAX_CLIENT_NUM];
	 SYS_PM5000_PRIVATE_STATUS   Pm5kStatus;
}DEV_RUN_STATUS_VER3,*PDEV_RUN_STATUS_VER3;

typedef struct __attribute__((packed)) tDEV_RUN_STATUS_VER4
{
	 DWORD  dwDevType;
	 DWORD  dwDevIP;
	 DWORD  dwFirmwareVer;
	 DWORD  dwSysRunTime;
	 DWORD  dwSysRealTime;   /*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	 DWORD  dwCpuOccupancy;
	 DWORD  dwWebServerRebootCount;
	 BYTE  	strDevHwAddr[32];  
	 DWORD  dwEthRxPackets;
	 DWORD  dwEthTxPackets;
	 DWORD  dwEthRxErrors;
	 DWORD  dwEthTxErrors;
	 DWORD  dwEthRxDropped;
	 DWORD  dwEthTxDropped;
	 DWORD  dwEthRxMulticast;
	 DWORD  dwEthCollisions;  
	 DWORD  dwDataDiCurrVal;
	 DWORD  dwDataDoCurrVal;
	 DWORD  dwDataWarnStatus;
	 DWORD  dwDataWarnMask;
	 DWORD  dwDataWarnDiStdVal;  
	 DWORD  dwSerCurrChNum;
	 DWORD  dwSerTxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerErrorCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwAudioEncCurrChNum;
	 DWORD  dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecCurrChNum;
	 DWORD  dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwVideoEncCurrChNum;
	 DWORD  dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  CurrUserCount;
	 DEV_USER_STATUS_INFONEWEX   	UserTable[SYS_MAX_USER_NUM];
	 SYS_PM5000_PRIVATE_STATUSEX   	Pm5kStatus;
}DEV_RUN_STATUS_VER4,*PDEV_RUN_STATUS_VER4; 


typedef struct __attribute__((packed)) tDEV_RUN_STATUS_VER6
{
	 DWORD  dwDevType;
	 DWORD  dwDevIP;
	 DWORD  dwFirmwareVer;
	 DWORD  dwPcmFirmwareVer;
	 DWORD  dwSysRunTime;
	 DWORD  dwSysRealTime;   /*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	 DWORD  dwCpuOccupancy;
	 DWORD  dwWebServerRebootCount;
	 BYTE  	strDevHwAddr[32];  
	 DWORD  dwEthRxPackets;
	 DWORD  dwEthTxPackets;
	 DWORD  dwEthRxErrors;
	 DWORD  dwEthTxErrors;
	 DWORD  dwEthRxDropped;
	 DWORD  dwEthTxDropped;
	 DWORD  dwEthRxMulticast;
	 DWORD  dwEthCollisions;  
	 DWORD  dwDataDiCurrVal;
	 DWORD  dwDataDoCurrVal;
	 DWORD  dwDataWarnStatus;
	 DWORD  dwDataWarnMask;
	 DWORD  dwDataWarnDiStdVal;  
	 DWORD  dwSerCurrChNum;
	 DWORD  dwSerTxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerErrorCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwAudioEncCurrChNum;
	 DWORD  dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecCurrChNum;
	 DWORD  dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwVideoEncCurrChNum;
	 DWORD  dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  CurrUserCount;
	 DEV_USER_STATUS_INFONEWEX   UserTable[SYS_MAX_USER_NUM];
	 SYS_PM5000_PRIVATE_STATUSEX   Pm5kStatus;
}DEV_RUN_STATUS_VER6,*PDEV_RUN_STATUS_VER6;

typedef struct __attribute__((packed)) tDEV_RUN_STATUS_VER7
{
	 DWORD  dwDevType;
	 DWORD  dwDevIP;
	 DWORD  dwFirmwareVer;
	 DWORD  dwPcmFirmwareVer;
	 DWORD  dwSysRunTime;
	 DWORD  dwSysRealTime;
	 DWORD  dwCpuOccupancy;
	 BYTE  	strDevHwAddr[32];  
	 DWORD  dwEthRxPackets;
	 DWORD  dwEthTxPackets;
	 DWORD  dwEthRxErrors;
	 DWORD  dwEthTxErrors;
	 DWORD  dwEthRxDropped;
	 DWORD  dwEthTxDropped;
	 DWORD  dwEthRxMulticast;
	 DWORD  dwEthCollisions;  
	 DWORD  dwDataDiCurrVal;
	 DWORD  dwDataDoCurrVal;
	 DWORD  dwDataWarnStatus;
	 DWORD  dwDataWarnMask;
	 DWORD  dwDataWarnDiStdVal;  
	 DWORD  dwSerCurrChNum;
	 DWORD  dwSerTxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerTxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerRxOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwSerErrorCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwAudioEncCurrChNum;
	 DWORD  dwAudioEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecCurrChNum;
	 DWORD  dwAudioDecChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwAudioDecLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  dwVideoEncCurrChNum;
	 DWORD  dwVideoEncChOverCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChLostCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChRebootCount[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChIsLive[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChBitRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	 DWORD  dwVideoEncChFrameRate[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];  
	 DWORD  CurrUserCount;
	 DEV_USER_STATUS_INFO_V7		UserTable[SYS_MAX_USER_NUM];
	 SYS_PM5000_PRIVATE_STATUS_V7	Pm5kStatus;
}DEV_RUN_STATUS_VER7,*PDEV_RUN_STATUS_VER7;

typedef struct __attribute__((packed)) tDEV_RUN_STATUS_VER8
{
	DWORD  dwDevType;
	DWORD  dwDevIP;
	DWORD  dwFirmwareVer;
	DWORD  dwPcmFirmwareVer;
	DWORD  dwSysRunTime;
	DWORD  dwSysRealTime;
	DWORD  dwCpuOccupancy;
	BYTE   strDevHwAddr[32];  
	DWORD  dwEthRxPackets;
	DWORD  dwEthTxPackets;
	DWORD  dwEthRxErrors;
	DWORD  dwEthTxErrors;
	DWORD  dwEthRxDropped;
	DWORD  dwEthTxDropped;
	DWORD  dwEthRxMulticast;
	DWORD  dwEthCollisions;  
	DWORD  dwSerCurrChNum;
	DWORD  dwSerTxCount[MAX_SERIAL_NUM_EX];
	DWORD  dwSerTxOverCount[MAX_SERIAL_NUM_EX];
	DWORD  dwSerRxCount[MAX_SERIAL_NUM_EX];
	DWORD  dwSerRxOverCount[MAX_SERIAL_NUM_EX];
	DWORD  dwSerErrorCount[MAX_SERIAL_NUM_EX];
	DWORD  CurrUserCount;
	DEV_USER_STATUS_INFO_V7			UserTable[SYS_MAX_USER_NUM];
	SYS_PM5000_PRIVATE_STATUS_V7	Pm5kStatus;
}DEV_RUN_STATUS_VER8,*PDEV_RUN_STATUS_VER8;


typedef struct __attribute__((packed)) tDEV_RUN_STATUS_INFOEX
{
	DWORD		dwMsgVersion;
	union		tDEV_RUN_STATUS_MSG_BODY	
	{
		DEV_RUN_STATUS_VER1		Ver1;
		DEV_RUN_STATUS_VER2		Ver2;
		DEV_RUN_STATUS_VER3  	Ver3;		
		DEV_RUN_STATUS_VER4  	Ver4;		
		DEV_RUN_STATUS_VER6  	Ver6;
		DEV_RUN_STATUS_VER7  	Ver7;
		DEV_RUN_STATUS_VER8  	Ver8;
	}MsgBody;
}DEV_RUN_STATUS_INFOEX,*PDEV_RUN_STATUS_INFOEX;



typedef struct tWARN_DI_LINKAGE_DO
{
	U32		WarnEvent;
}WARN_DI_LINKAGE_DO,*PWARN_DI_LINKAGE_DO;

typedef struct tVIDEO_DEC_PLAY_CMD_ACK
{
	U16		wVideoChNo;
	U16		wAudioChNo;
	U32		dwVideoFormat;
	U32		dwAudioFormat;
	U32		dwEncoderIP;
	U32		dwVideoKbps;
	U16		wVideoGopSize;
	U16		wVideoFps;
	U16		wVideoQuality;
	U8		bIsReqAudio;
	U8		bVideoPolicy;
}VIDEO_DEC_PLAY_CMD_ACK,*PVIDEO_DEC_PLAY_CMD_ACK;

typedef struct tADDRSERVER_AUTH_REQ_CMD
{
	U8		strUserName[32];
}ADDRSERVER_AUTH_REQ_CMD,*PADDRSERVER_AUTH_REQ_CMD;
typedef struct tADDRSERVER_LOGIN_REQ_CMD
{
	U8		strLocalDevName[32];
	U8		strRemoteDevName[32];
}ADDRSERVER_LOGIN_REQ_CMD,*PADDRSERVER_LOGIN_REQ_CMD;

typedef struct tCAPTURE_PICTURE_SAVE_CMD
{
	DWORD	dwChannelNo;
	DWORD	dwQuality;
	BOOL	IsBmpFormat;
	U8		strPicFileName[128];
}CAPTURE_PICTURE_SAVE_CMD,*PCAPTURE_PICTURE_SAVE_CMD;

typedef struct tRECORD_CH_RUN_STATUS
{
	BOOL	IsStarted;
	BOOL	IsRecording;
	DWORD	dwCurrMode;
	DWORD	dwStreamErrCount;
	DWORD	dwFileErrCount;
	DWORD	dwFileCount;
	DWORD	dwReserved;
}RECORD_CH_RUN_STATUS,*PRECORD_CH_RUN_STATUS;
typedef struct tRECORD_CURR_RUN_STATUS
{
	BOOL	MediaIsValid;
	DWORD	dwMediaTotalCapacityMB;
	DWORD	dwMediaLeftCapacityMB;
	DWORD	dwQueueOverCount;
	DWORD	dwMediaErrCount;
	DWORD	dwDelFileCount;
	BYTE	bMediaType;
	BYTE	bReserved;
	WORD	wReserved;
	DWORD	dwReserved;
	RECORD_CH_RUN_STATUS	ChTab[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
}RECORD_CURR_RUN_STATUS,*PRECORD_CURR_RUN_STATUS;

typedef struct tRECORD_DOWNLOAD_LIST_CMD_REQ
{
	DWORD		m_dwChNo;//录像通道号
	DWORD		m_dwFileNumOffset;//文件数偏移
	DWORD		m_dwCmdSeqNo;//命令序号
	DWORD		m_dwStartGmtTime;//搜索开始GMT标准时间
	DWORD		m_dwEndGmtTime;//搜索结束GMT标准时间
	DWORD		m_dwEventMask;//搜索事件标记
}RECORD_DOWNLOAD_LIST_CMD_REQ,*PRECORD_DOWNLOAD_LIST_CMD_REQ;

typedef struct tRECORD_DOWNLOAD_LIST_CMD_ACK
{
	DWORD		m_dwChNo;//保持与相应命令一样
	DWORD		m_dwFileNumOffset;//保持与相应命令一样
	DWORD		m_dwCmdSeqNo;//保持与相应命令一样
	DWORD		m_dwLeftFileNum;//剩余文件数目，不包含本次传输的文件数
	DWORD		m_dwErrNo;//零表示成功
}RECORD_DOWNLOAD_LIST_CMD_ACK,*PRECORD_DOWNLOAD_LIST_CMD_ACK;

typedef struct tRECORD_DOWNLOAD_FILE_CMD_REQ
{
	DWORD		m_dwChNo;//录像通道号
	DWORD		m_dwFileByteOffset;//文件字节偏移
	DWORD		m_dwCmdSeqNo;//命令序号
	BYTE		m_strFileName[256];//文件名，C风格字符串，以空字符结束
}RECORD_DOWNLOAD_FILE_CMD_REQ,*PRECORD_DOWNLOAD_FILE_CMD_REQ;

typedef struct tRECORD_DOWNLOAD_FILE_CMD_ACK
{
	DWORD		m_dwChNo;//保持与相应命令一样
	DWORD		m_dwFileByteOffset;//保持与相应命令一样
	DWORD		m_dwCmdSeqNo;//保持与相应命令一样
	DWORD		m_dwLeftLen;//剩余文件内容长度，不包含本次传输的文件内容
	DWORD		m_dwErrNo;//零表示成功
}RECORD_DOWNLOAD_FILE_CMD_ACK,*PRECORD_DOWNLOAD_FILE_CMD_ACK;


typedef struct tMEGAEYES_SERVER_CONFIG
{
	char		m_strDevID[32];
	DWORD		m_dwRegisterServerIP;
	WORD		m_wDevRegisterPort;
	WORD		m_wStoreRegisterPort;
	WORD		m_wVideoServerPort;
	BYTE		m_bIsEnable;
	BYTE		m_bPlatformSysType;
	DWORD		m_dwMaxVideoLinkNum;
}MEGAEYES_SERVER_CONFIG,*PMEGAEYES_SERVER_CONFIG;
typedef union tMEGAEYES_CONFIG
{
	MEGAEYES_SERVER_CONFIG		m_ServerConfig;
	BYTE						m_ConfigSizeReserved[2048];
}MEGAEYES_CONFIG,*PMEGAEYES_CONFIG;


typedef struct tDEV_PM5000_PROTOCOL_HEADER_CON
{
	 BYTE Header;
	 BYTE Addr;
	 BYTE Len;
}DEV_PM5000_PROTOCOL_HEADER_CON,*PDEV_PM5000_PROTOCOL_HEADER_CON;

typedef struct tDEV_PM5000_PROTOCOL_END_CON
{
	 BYTE Checksum;
	 BYTE End;
}DEV_PM5000_PROTOCOL_END_CON,*PDEV_PM5000_PROTOCOL_END_CON;

#define CONFIG_DATABASE_LOAD_MTU   (3*1024)
typedef struct tCONFIG_DATABASE_DOWNLOAD_REQ
{
	 DWORD  m_dwFileOffset;
	 DWORD  m_dwReserved;
}CONFIG_DATABASE_DOWNLOAD_REQ,*PCONFIG_DATABASE_DOWNLOAD_REQ;
typedef struct tCONFIG_DATABASE_DOWNLOAD_ACK
{
	 DWORD  m_dwFileOffset;   /*DataLen为0且FileOffset和FileSize相等表示下载结束*/
	 DWORD  m_dwFileSize;
	 DWORD  m_dwDataLen;
	 DWORD  m_dwReserved;
	 BYTE  m_DataBuf[CONFIG_DATABASE_LOAD_MTU];
}CONFIG_DATABASE_DOWNLOAD_ACK,*PCONFIG_DATABASE_DOWNLOAD_ACK;
typedef struct tCONFIG_DATABASE_UPLOAD_REQ
{
	 DWORD  m_dwFileOffset;   /*DataLen为0且FileOffset和FileSize相等表示上载结束*/
	 DWORD  m_dwFileSize;
	 DWORD  m_dwDataLen;
	 DWORD  m_dwReserved;
	 BYTE  m_DataBuf[CONFIG_DATABASE_LOAD_MTU];
}CONFIG_DATABASE_UPLOAD_REQ,*PCONFIG_DATABASE_UPLOAD_REQ;
typedef struct tCONFIG_DATABASE_UPLOAD_ACK
{
	 DWORD  m_dwFileOffset;
	 DWORD  m_dwFileSize;  /*实际大小*/
	 DWORD  m_dwDataLen;  /*实际写入长度*/
	 DWORD  m_dwReserved;
}CONFIG_DATABASE_UPLOAD_ACK,*PCONFIG_DATABASE_UPLOAD_ACK;


typedef struct tFIRMWARE_UPDATE_REQ
{
	 char  m_strFtpServerIP[32];
	 char  m_strFtpUserName[32];
	 char  m_strFtpUserPassword[32];
	 char  m_strReserved[32];
	 char  m_strUpdateScriptFileName[128];
	 WORD  m_wFtpServerPort;
	 WORD  m_wReserved;
}FIRMWARE_UPDATE_REQ,*PFIRMWARE_UPDATE_REQ;
typedef struct tFIRMWARE_UPDATE_ACK
{
	 WORD  m_RetCode;   /*0表示成功*/
	 WORD  m_wReserved;
	 char  m_strRetMsg[3*1024];
}FIRMWARE_UPDATE_ACK,*PFIRMWARE_UPDATE_ACK;


typedef struct tSENDBUF
{
	U8 	Data[SENDBUFSIZE];
}SENDBUF,*PSENDBUF;

typedef struct tVIDEO_BUF
{
	U8 Buf[BUFFERSIZE];
}VIDEO_BUF,*PVIDEO_BUF;

typedef struct tAUDIO_BUF
{
	U8 Buf[AUDIOBUFSIZE];
}AUDIO_BUF,*PAUDIO_BUF;

typedef struct tCMD_BUF
{
	U8 Buf[CMDBUFSIZE];
}CMD_BUF,*PCMD_BUF;

typedef struct tRECORD_DOWNLOAD_BUF
{
	BYTE	Buf[PROTOCOL_RECORD_DOWNLOAD_MTU];/*对于文件名列表以“回车换行”分隔，包含若干完整的文件名顺序排列*/
}RECORD_DOWNLOAD_BUF,*PRECORD_DOWNLOAD_BUF;

typedef struct tCAPTURE_PICTURE_BUF
{
	U8 Buf[CAPTURE_PICTURE_NALU_SIZE];
}CAPTURE_PICTURE_BUF,*PCAPTURE_PICTURE_BUF;




typedef struct __attribute__((packed)) tSTOPVIDEO
{
	U8	bStopDev;
}STOPVIDEO,*PSTOPVIDEO;
typedef struct __attribute__((packed)) tSTOPAUDIO
{
	U8	bStopDev;
}STOPAUDIO,*PSTOPAUDIO;
typedef struct __attribute__((packed)) tSTARTAUDIO
{
	U8	bStartDev;
}STARTAUDIO,*PSTARTAUDIO;
typedef struct __attribute__((packed)) tUSERLOGIN
{
	U8	Level;				
}USERLOGIN,*PUSERLOGIN;
typedef struct __attribute__((packed)) tSYSRESETCONF
{
	U8	EthAddr[6];
}SYSRESETCONF,*PSYSRESETCONF;

typedef  struct __attribute__((packed)) tSER_SAA7113_CTRL
{
	U8	OpCode;
	U8	RegAddr;
	U8	RegVal;
	U8	Sum;
	U8	Eoi;
}SER_SAA7113_CTRL,*PSER_SAA7113_CTRL;
typedef struct __attribute__((packed)) tNET_MANAGER_SET
{
	U32			DevDebugServerIP;
	U32			DevManagerServerIP;
	U32			DevLogServerIP;
	U32			DevVideoMultiCastIP;
	U32			DevNTP_ServerIP;
	U16			DevDebugServerPort;
	U16			DevManagerServerPort;
	U16			DevLogServerPort;
	U16			DevVideoMultiCastPort;
	U16			DevNTP_ServerPort;
	U16			DevManagerPollTimer;
	U16			DevNTP_PollTimer;
	U16			wReserved;
}NET_MANAGER_SET,*PNET_MANAGER_SET;
typedef struct __attribute__((packed)) tSER_NET_MANAGER_SET
{
	U8	OpCode;
	U8	CmdParam[sizeof(NET_MANAGER_SET)];
	U8	Sum;
	U8	Eoi;
}SER_NET_MANAGER_SET,*PSER_NET_MANAGER_SET;
typedef struct __attribute__((packed)) tGMT_TIME_CONFIG
{
	U32 CurrGmtTime;	/*自从格林威治标准时间1970年1月1日0时0分0秒以来的秒数*/
	S32 LocalTimezone;
}GMT_TIME_CONFIG,*PGMT_TIME_CONFIG;
typedef struct __attribute__((packed)) tSER_GMT_TIME_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(GMT_TIME_CONFIG)];
	U8	Sum;
	U8	Eoi;
}SER_GMT_TIME_CONFIG,*PSER_GMT_TIME_CONFIG;
typedef struct __attribute__((packed)) tSER_TRANSMIT_CONFIG
{
	U8	OpCode;
	U8	IsTransmit;
	U8	OptFlag;
	U8  Sum;
	U8  Eoi;
}SER_TRANSMIT_CONFIG,*PSER_TRANSMIT_CONFIG;

typedef struct __attribute__((packed)) tSYS_NET_ADV_CONFIG
{
	DWORD	dwNetIfMode;
	DWORD	dwAddrServerIP;
	DWORD	dwNameServerIP;
	DWORD	dwReserved;
	U8		strHostName[32];
	U8		strUserName[32];
	U8		strPassword[32];
	U8		strPhoneNumber[32];
	U8		strRemoteHostName[32];
	U8		strReserved[32];
}SYS_NET_ADV_CONFIG,*PSYS_NET_ADV_CONFIG;
typedef struct  __attribute__((packed)) tSER_SYS_NET_ADV_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(SYS_NET_ADV_CONFIG)];
	U8	Sum;
	U8	Eoi;
}SER_SYS_NET_ADV_CONFIG,*PSER_SYS_NET_ADV_CONFIG;


typedef struct __attribute__((packed)) tSYS_MISC_CONF
{
	DWORD	dwPcmClosEnable;
	DWORD	dwForceDynamicPraraEnable;
	DWORD	dwDebugEnable;
	DWORD	dwReserved;
	U8		strReserved[32];
}SYS_MISC_CONF,*PSYS_MISC_CONF;
typedef struct __attribute__((packed)) tSYS_FSU_SENSOR_CONF
{
	DWORD	dwMode;
	DWORD	dwState;
	DWORD	dwReserved1;
	DWORD	dwReserved2;
	char	strDeviceID[16];
	char	strNodeID[16];
}SYS_FSU_SENSOR_CONF,*PSYS_FSU_SENSOR_CONF;
typedef struct  __attribute__((packed)) tSER_SYS_MISC_CONF
{
	U8	OpCode;
	U8	CmdParam[sizeof(SYS_MISC_CONF)];
	U8	Sum;
	U8	Eoi;
}SER_SYS_MISC_CONF,*PSER_SYS_MISC_CONF;

typedef struct __attribute__((packed)) tAILINEAR_TRANS
{
	float	AiLinearTrans_a;
	float	AiLinearTrans_b;
}AILINEAR_TRANS,*PAILINEAR_TRANS;
typedef struct __attribute__((packed)) tAILINEAR_TRANS_CONFIG
{
	AILINEAR_TRANS 	AiLinearTrans[8];
}AILINEAR_TRANS_CONFIG,*PAILINEAR_TRANS_CONFIG;
typedef struct __attribute__((packed)) tEEPROM_CONFIG
{
	BYTE 	EepromBuf[8];
}EEPROM_CONFIG,*PEEPROM_CONFIG;
typedef struct __attribute__((packed)) tSYS_MISC_TEST
{
	DWORD	dwMiscCmd;
	DWORD	dwMiscStatus;
	DWORD	dwReserved1;
	DWORD	dwReserved2;
	AILINEAR_TRANS_CONFIG	dwAilinear;
	U8		strReserved[32];
}SYS_MISC_TEST,*PSYS_MISC_TEST;
typedef struct  __attribute__((packed)) tSER_SYS_MISC_TEST
{
	U8	OpCode;
	U8	CmdParam[sizeof(SYS_MISC_TEST)];
	U8	Sum;
	U8	Eoi;
}SER_SYS_MISC_TEST,*PSER_SYS_MISC_TEST;

typedef struct	__attribute__((packed)) tDIDO_SERVER_CONFIG
{
	U32		RemoteServerIP;
	U32		DevLoginID;
	U32		WarnDiStdVal;
	U32		CtrlDoDefaultVal;
	U32		WarnEnableCtrlDiStdVal;
	U32		WarnEnableDefaultVal;
	U8		CtrlDoNum;
	U8		CtrlDiNum;
	U8		WarnDiNum;
	U8		bReservered1;
	U32		dwReserverd1;
}DIDO_SERVER_CONFIG,*PDIDO_SERVER_CONFIG;
typedef struct __attribute__((packed)) tDIDO_SERVER_WARN_NOTIFY
{
	BOOL	IsWarnSetChange;
	BOOL	IsWarnEvent;
	BOOL	IsWarnStatus;
	U32		WarnEnableMask;
	U32		WarnSetOwnerID;
	U32		WarnEventMask;
	U32		WarnStatusMask;
}DIDO_SERVER_WARN_NOTIFY,*PDIDO_SERVER_WARN_NOTIFY;
typedef struct __attribute__((packed)) tDIDO_SERVER_CTRL
{
	U32		WarnEnableMask;
	U32		WarnEnableVal;
	U32		CtrlDoMask;
	U32		CtrlDoVal;
}DIDO_SERVER_CTRL,*PDIDO_SERVER_CTRL;
typedef union	__attribute__((packed)) tDIDO_SERVER_CMD
{
	DIDO_SERVER_CONFIG			Config;
	DIDO_SERVER_WARN_NOTIFY		WarnInfo;
	DIDO_SERVER_CTRL			CtrlInfo;
}DIDO_SERVER_CMD,*PDIDO_SERVER_CMD;
typedef struct __attribute__((packed)) tSER_DIDO_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DIDO_SERVER_CMD)];
	U8  Sum;
	U8  Eoi;
}SER_DIDO_CONFIG,*PSER_DIDO_CONFIG;

typedef struct __attribute__((packed)) tDEV_NET_SWITCH_CONFIG
{
	U32	RemoteDevAddrTab[DEV_NET_MAX_SWITCH];
	U32 SecondIP;
	U32	SecondSubNetMask;
	U32 SecondGateway;
	U8	SecondEthAddr[6];
	U16	wReserved;
}DEV_NET_SWITCH_CONFIG,*PDEV_NET_SWITCH_CONFIG;
typedef struct __attribute__((packed)) tSER_DEV_NET_SWITCH_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_NET_SWITCH_CONFIG)];
	U8  Sum;
	U8  Eoi;	
}SER_DEV_NET_SWITCH_CONFIG,*PSER_DEV_NET_SWITCH_CONFIG;

typedef struct __attribute__((packed)) tDEV_VIDEO_OVERLAY_CONFIG
{
	DWORD	dwChNo;
	DWORD	dwStartX;
	DWORD	dwStartY;
	DWORD	dwWidth;
	DWORD	dwHeight;
	DWORD	dwWarnSensitive;
}DEV_VIDEO_OVERLAY_CONFIG,*PDEV_VIDEO_OVERLAY_CONFIG;
typedef struct __attribute__((packed)) tSER_DEV_VIDEO_OVERLAY_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_VIDEO_OVERLAY_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_DEV_VIDEO_OVERLAY_CONFIG,*PSER_DEV_VIDEO_OVERLAY_CONFIG;

typedef struct __attribute__((packed)) tDEV_VI_CAPTURE_SET
{
	DWORD	dwChNo;
	DWORD	dwStartX;
	DWORD	dwStartY;
	DWORD	dwWidth;
	DWORD	dwHeight;
}DEV_VI_CAPTURE_SET,*PDEV_VI_CAPTURE_SET;
typedef struct __attribute__((packed)) tSER_DEV_VI_CAPTURE_SET
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_VI_CAPTURE_SET)];
	U8  Sum;
	U8  Eoi;
}SER_DEV_VI_CAPTURE_SET,*PSER_DEV_VI_CAPTURE_SET;

typedef struct __attribute__((packed)) tDEV_VIDEO_WARN
{
	DWORD	dwChNo;
	DWORD	dwWarnType;
	DWORD	dwWarnEvent;
}DEV_VIDEO_WARN,*PDEV_VIDEO_WARN;
typedef struct __attribute__((packed)) tSER_DEV_VIDEO_WARN
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_VIDEO_WARN)];
	U8  Sum;
	U8  Eoi;	
}SER_DEV_VIDEO_WARN,*PSER_DEV_VIDEO_WARN;

typedef struct __attribute__((packed)) tDEV_WEB_SERVER_VIDEO_CH_CONFIG
{
	U8	CtrlProtocolType;
	U8	CtrlBusAddr;
	U8	CtrlPort;
	U8	CtrlSpeed;
	U8	VideoSize;
	U8	VideoFrameRate;
	U8	VideoQuality;
	U8	VideoProtocolType;
	U16	CtrlBaudrate;
	U16	VideoBitRate;
	U8	strVidiconName[20];
}DEV_WEB_SERVER_VIDEO_CH_CONFIG,*PDEV_WEB_SERVER_VIDEO_CH_CONFIG;
typedef struct	__attribute__((packed)) tDEV_WEB_SERVER_DI_CH_SET
{
	U8	strSignalName[8];
}DEV_WEB_SERVER_DI_CH_SET,*PDEV_WEB_SERVER_DI_CH_SET;
typedef struct	__attribute__((packed)) tDEV_WEB_SERVER_DO_CH_SET
{
	U8	strSignalName[8];
}DEV_WEB_SERVER_DO_CH_SET,*PDEV_WEB_SERVER_DO_CH_SET;
typedef struct __attribute__((packed)) tDEV_WEB_SERVER_CONFIG
{	
	U8									IsOpenAudio;
	U8									IsStartSoftOSD;
	U8									WebUserLevel;
	U8									IsNeedPassword;
	DEV_WEB_SERVER_VIDEO_CH_CONFIG		VideoChSet[4];
	DEV_WEB_SERVER_DI_CH_SET			DiChSet[8];
	DEV_WEB_SERVER_DO_CH_SET			DoChSet[4];
}DEV_WEB_SERVER_CONFIG,*PDEV_WEB_SERVER_CONFIG;
typedef struct __attribute__((packed)) tDEV_WEB_SERVER_RECORD_TIME_TAB
{
	WORD								wStartTime;	/*单位：2秒*/
	WORD								wEndTime;	/*单位：2秒*/
}DEV_WEB_SERVER_RECORD_TIME_TAB,*PDEV_WEB_SERVER_RECORD_TIME_TAB;
typedef struct __attribute__((packed)) tDEV_WEB_SERVER_RECORD_CH_CONFIG
{
	DWORD								dwRecordType;
	DWORD								dwDayMask;
	DWORD								dwEventMask;
	DWORD								dwReserved;
	DEV_WEB_SERVER_RECORD_TIME_TAB		TimeTab[4];
}DEV_WEB_SERVER_RECORD_CH_CONFIG,*PDEV_WEB_SERVER_RECORD_CH_CONFIG;
typedef struct __attribute__((packed)) tDEV_WEB_SERVER_CONFIGEX
{	
	BYTE								IsOpenAudio;
	BYTE								IsStartSoftOSD;
	BYTE								WebUserLevel;
	BYTE								IsNeedPassword;
	BYTE								RecordMediaType;
	BYTE								bRecordReserved;
	BYTE								DefaultPresetNo;
	BYTE								PowerOnDelayS;
	BYTE								CtrlIdleDelayM;
	BYTE								GpsWorkMode;
	WORD								wRecordReserved;
	DWORD								dwReserved;
	DEV_WEB_SERVER_VIDEO_CH_CONFIG		VideoChSet[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DEV_WEB_SERVER_RECORD_CH_CONFIG		RecordChSet[SYS_MEDIA_STREAM_MAX_VIRTUAL_CH_NUM];
	DEV_WEB_SERVER_DI_CH_SET			DiChSet[8];
	DEV_WEB_SERVER_DO_CH_SET			DoChSet[4];
	char								strRecordLocalBasePath[64];
	char								strFtpUserPassword[16];
	WORD								wFtpPort;
	WORD								wFtpMaxRateKBps;
	char								strFtpUserName[16];
	char								strReserved[26];
	WORD								wDefaultGopSize;
	char								strRecordRemoteBasePath[128];
	char		 						strUserRemarkInfo[128];
}DEV_WEB_SERVER_CONFIGEX,*PDEV_WEB_SERVER_CONFIGEX;
typedef struct __attribute__((packed)) tSER_DEV_WEB_SERVER_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_WEB_SERVER_CONFIG)];
	U8  Sum;
	U8  Eoi;	
}SER_DEV_WEB_SERVER_CONFIG,*PSER_DEV_WEB_SERVER_CONFIG;


typedef struct __attribute__((packed)) tDEV_VMD_REGION
{
	WORD	wStartX;
	WORD	wStartY;
	WORD	wWidth;
	WORD	wHeight;
	WORD	wSensitivity;
	WORD	wThreshold;
}DEV_VMD_REGION,*PDEV_VMD_REGION;
typedef struct __attribute__((packed)) tDEV_VMD_ANY_REGION
{
	WORD	wSensitivity;
	WORD	wThreshold;
	DWORD	dwRegionMask1;
	DWORD	dwRegionMask2;
	DWORD	dwRegionMask3;
	DWORD	dwRegionMask4;
}DEV_VMD_ANY_REGION,*PDEV_VMD_ANY_REGION;
typedef struct __attribute__((packed)) tDEV_VMD_CH_CONFIG
{
	DWORD			dwCurrChNo;
	BOOL			IsAntiJamming;
	WORD			wSpeed;
	WORD			wMode;
	union			
	{
		DEV_VMD_ANY_REGION	AnyRegion;
		DEV_VMD_REGION		StdRegion[MAX_VIDEO_MD_REGION_NUM];
	}Region;
}DEV_VMD_CH_CONFIG,*PDEV_VMD_CH_CONFIG;
typedef struct __attribute__((packed)) tSER_DEV_VMD_CH_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_VMD_CH_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_DEV_VMD_CH_CONFIG,*PSER_DEV_VMD_CH_CONFIG;


typedef struct __attribute__((packed)) tVIRTUAL_CAMERA_CTRL
{
	U8	ChNo;
	U8	Speed;
	U8	PresetNo;
	U8	Reserved;
}VIRTUAL_CAMERA_CTRL,*PVIRTUAL_CAMERA_CTRL;
typedef struct __attribute__((packed)) tSER_VIRTUAL_CAMERA_CTRL
{
	U8	OpCode;
	U8	CmdParam[sizeof(VIRTUAL_CAMERA_CTRL)];
	U8  Sum;
	U8  Eoi;
}SER_VIRTUAL_CAMERA_CTRL,*PSER_VIRTUAL_CAMERA_CTRL;

typedef struct __attribute__((packed)) tRC7222_CONFIG
{
	DWORD	dwCtrlMask;
	DWORD	dwBandwidthMask;
	BYTE	bPhyAddr;
	BYTE	bSelfInfo;
	WORD	wReseved;
}RC7222_CONFIG,*PRC7222_CONFIG;
typedef struct __attribute__((packed)) tSER_RC7222_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(RC7222_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_RC7222_CONFIG,*PSER_RC7222_CONFIG;

typedef struct __attribute__((packed)) tVIDEO_ENCODER_OPTION
{
	DWORD	dwChNo;
	BOOL	IsColorToGrey;
	BOOL	IsEnableDSU;
}VIDEO_ENCODER_OPTION,*PVIDEO_ENCODER_OPTION;
typedef struct __attribute__((packed)) tSER_VIDEO_ENCODER_OPTION
{
	U8	OpCode;
	U8	CmdParam[sizeof(VIDEO_ENCODER_OPTION)];
	U8  Sum;
	U8  Eoi;
}SER_VIDEO_ENCODER_OPTION,*PSER_VIDEO_ENCODER_OPTION;

typedef struct __attribute__((packed)) tDIDO_LLINKAGE_OBJ
{
	DWORD	dwLinkageDiMask;
	WORD	wCancelDelaySeconds;
	BYTE	bIsAndMode;
	BYTE	bReserved;
}DIDO_LLINKAGE_OBJ;
typedef struct __attribute__((packed)) tDIDO_LLINKAGE_CONFIG
{
	DIDO_LLINKAGE_OBJ	LinkageDo[SER_DEV_DIDO_LLINKAGE_MAX_DO_NUM];
}DIDO_LLINKAGE_CONFIG,*PDIDO_LLINKAGE_CONFIG;

typedef struct __attribute__((packed)) _AIO_VAL_CONFIG
{
	BYTE		Ai_val[14];
	BYTE		Di_val[18];
	BYTE		Do_val[8];
}AIO_VAL_CONFIG, *PAIO_VAL_CONFIG;

typedef struct __attribute__((packed)) tAIDO_LLINKAGE_CONFIG
{
	DWORD	dwLinkageAiMask[SER_DEV_DIDO_LLINKAGE_MAX_DO_NUM];
	float	AiAlarmHighThreoad[16];
	float	AiAlarmLowThreoad[16];
	float	AiLinearTrans_a[16];
	float	AiLinearTrans_b[16];
	U32		WarnEnableDefaultVal;
	DWORD	AiReturnDifference[16];
	DWORD	dwReserved[16];
}AIDO_LLINKAGE_CONFIG,*PAIDO_LLINKAGE_CONFIG;




typedef struct __attribute__((packed)) tSER_DIDO_LLINKAGE_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(DIDO_LLINKAGE_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_DIDO_LLINKAGE_CONFIG,*PSER_DIDO_LLINKAGE_CONFIG;

typedef struct __attribute__((packed)) tWARN_LLINKAGE_CONFIG
{
 	DIDO_LLINKAGE_OBJ LinkageDo[SER_DEV_WARN_LLINKAGE_MAX_ACTION_NUM];
}WARN_LLINKAGE_CONFIG,*PWARN_LLINKAGE_CONFIG;

typedef struct __attribute__((packed)) tSER_WARN_LLINKAGE_CONFIG
{
	 BYTE OpCode;
	 BYTE CmdParam[sizeof(WARN_LLINKAGE_CONFIG)];
	 BYTE Sum;
	 BYTE Eoi;
}SER_WARN_LLINKAGE_CONFIG,*PSER_WARN_LLINKAGE_CONFIG;


typedef struct __attribute__((packed)) tAUDIO_CODEC_CONFIG
{
	BYTE	EncodeInputVolume;
	BYTE	DecoderOutputVolume;
	WORD	wReserved;
	DWORD	dwReserved;
}AUDIO_CODEC_CONFIG,*PAUDIO_CODEC_CONFIG;
typedef struct __attribute__((packed)) tSER_AUDIO_CODEC_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(AUDIO_CODEC_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_AUDIO_CODEC_CONFIG,*PSER_AUDIO_CODEC_CONFIG;

typedef struct	__attribute__((packed)) tADDR_SERVER_CONFIG
{
	WORD	wProtocolMode;
	WORD	wWorkMode;
	WORD	wAddrServerPort;
	WORD	wWebServerPort;
	DWORD	dwSecondNameServerIP;
	BYTE	strAddrServerName[32];
	BYTE	strUserName[32];
	BYTE	strPassword[32];
	BYTE	strWebUserName[32];
	BYTE	strWebUserPassword[32];
}ADDR_SERVER_CONFIG,*PADDR_SERVER_CONFIG;
typedef struct __attribute__((packed)) tSER_ADDR_SERVER_CONFIG
{
	U8	OpCode;
	U8	CmdParam[sizeof(ADDR_SERVER_CONFIG)];
	U8  Sum;
	U8  Eoi;
}SER_ADDR_SERVER_CONFIG,*PSER_ADDR_SERVER_CONFIG;

typedef struct __attribute__((packed)) tVIDEO_ENC_ADV_OPTION_S
{
	DWORD	dwAuthenticationID;
	DWORD	dwFlagMask;
	DWORD	dwFlagExMask;
	WORD	wVideoMtu;
	WORD	wCodecDecoderMediaChNo;
	BYTE	strWaterMarkKey[SER_DEV_VIDEO_ENCODE_ADV_OPTION_DWM_KEY_LEN];
	BYTE	strWaterMarkUser[SER_DEV_VIDEO_ENCODE_ADV_OPTION_DWM_CHAR_LEN];
	BYTE	CodecDecoderUserLevel;
	BYTE	bReserved;
	WORD	wReserved;
	DWORD	CodecDecoderRemoteIP;
}VIDEO_ENC_ADV_OPTION_S,*PVIDEO_ENC_ADV_OPTION_S;
typedef union __attribute__((packed)) tVIDEO_ENC_ADV_OPTION_U
{
	VIDEO_ENC_ADV_OPTION_S	AdvOption;
	BYTE					ReservedBuf[224];
}VIDEO_ENC_ADV_OPTION_U,*PVIDEO_ENC_ADV_OPTION_U;
typedef struct __attribute__((packed)) tSER_VIDEO_ENC_ADV_OPTION
{
	U8	OpCode;
	U8	CmdParam[sizeof(VIDEO_ENC_ADV_OPTION_U)];
	U8  Sum;
	U8  Eoi;	
}SER_VIDEO_ENC_ADV_OPTION,*PSER_VIDEO_ENC_ADV_OPTION;

typedef struct __attribute__((packed)) tTVIDEO_NODE
{
	U32		RemoteIP;
	U16		Port;
	U16		MsgLen;
	U32		BitRate;
	U16		AudioPID;
	U16		VideoPID;
	U16		PCR_PID;
	U16		Format;
}TVIDEO_NODE,*PTVIDEO_NODE;
typedef struct __attribute__((packed)) tVIDEO_TRANSPARENCY_CONFIG
{
	U32				DevNum;
	TVIDEO_NODE		DevTable[MAX_TVDEV_NUM];
}VIDEO_TRANSPARENCY_CONFIG,*PVIDEO_TRANSPARENCY_CONFIG;
typedef struct __attribute__((packed)) tSER_VIDEO_TRANSPARENCY_CONFIG 
{
	U8	OpCode;
	U8	CmdParam[sizeof(VIDEO_TRANSPARENCY_CONFIG)];
	U8	Sum;
	U8	Eoi;
}SER_VIDEO_TRANSPARENCY_CONFIG,*PSER_VIDEO_TRANSPARENCY_CONFIG;

typedef struct __attribute__((packed)) tGPS_MSG_UTC_TIME
{
	WORD	wHours;
	WORD	wMinutes;
	WORD	wSeconds;
	WORD	wMilliSeconds;
}GPS_MSG_UTC_TIME,*PGPS_MSG_UTC_TIME;
typedef struct __attribute__((packed)) tGPS_MSG_LATITUDE_LONGITUDE
{
	WORD	wDegree;
	WORD	wMinute;
	WORD	wMinuteFraction;
	WORD	wDirectionIndicator;	/*'E','W','N','S'*/
}GPS_MSG_LATITUDE_LONGITUDE,*PGPS_MSG_LATITUDE_LONGITUDE;
typedef struct __attribute__((packed)) tGPS_MSG_DATE
{
	WORD	wDay;		/*1~31*/
	WORD	wMonth;		/*1~12*/
	DWORD	dwYear;	
}GPS_MSG_DATE,*PGPS_MSG_DATE;
typedef struct __attribute__((packed)) tGPS_MSG_FLOAT_UNIT
{
	DWORD	dwInteger;
	DWORD	dwFraction;
}GPS_MSG_FLOAT_UNIT,*PGPS_MSG_FLOAT_UNIT;
typedef struct __attribute__((packed)) tGPS_ACCESS_SPECIFICATION_MSG
{
	DWORD								dwMemberMask;
	GPS_MSG_UTC_TIME					Time;
	GPS_MSG_DATE						Date;
	GPS_MSG_LATITUDE_LONGITUDE			Latitude;
	GPS_MSG_LATITUDE_LONGITUDE			Longitude;
	GPS_MSG_FLOAT_UNIT					SpeedKmPerHour;
	GPS_MSG_FLOAT_UNIT					CourseByDegree;
	GPS_MSG_FLOAT_UNIT					AltitudeByMeter;			
}GPS_ACCESS_SPECIFICATION_MSG,*PGPS_ACCESS_SPECIFICATION_MSG;
typedef struct __attribute__((packed)) tSER_GPS_ACCESS_SPECIFICATION_MSG
{
	U8	OpCode;
	U8	CmdParam[sizeof(GPS_ACCESS_SPECIFICATION_MSG)];
	U8	Sum;
	U8	Eoi;
}SER_GPS_ACCESS_SPECIFICATION_MSG,*PSER_GPS_ACCESS_SPECIFICATION_MSG;

typedef struct __attribute__((packed)) tDEV_ZJVCPT_MEDIA_CH_CON
{
	WORD	m_wLocalChNo;
	WORD	m_wRemoteChNo;
	DWORD	m_dwFormat;
	DWORD	m_dwBitRateKbps;
	BYTE	m_StreamType;
	BYTE	m_NetMode;
	BYTE	m_IsRun;
	BYTE	m_bReserved;
	WORD	m_wReserved;
	WORD	m_Port;
	DWORD	m_IpAddr;
}DEV_ZJVCPT_MEDIA_CH_CON,*PDEV_ZJVCPT_MEDIA_CH_CON;
typedef struct __attribute__((packed)) tSER_DEV_ZJVCPT_MEDIA_CH_CON
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_ZJVCPT_MEDIA_CH_CON)];
	U8	Sum;
	U8	Eoi;
}SER_DEV_ZJVCPT_MEDIA_CH_CON,*PSER_DEV_ZJVCPT_MEDIA_CH_CON;

typedef struct __attribute__((packed)) tDEV_MAP_CON
{
	U32  		LocalSerNum;
	U32			LocalSerTable[MAX_SERIAL_NUM];
}DEV_MAP_CON,*PDEV_MAP_CON;
typedef struct __attribute__((packed)) tSER_DEV_MAP_CON
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_MAP_CON)];
	U8	Sum;
	U8	Eoi;
}SER_DEV_MAP_CON,*PSER_DEV_MAP_CON;

typedef struct tDEV_DECODER_VIDEO_OUT_CH_MODE_CON
{
	 BYTE ChNo;
	 BYTE VideoPutoutMode;
	 WORD wReserved;
	 DWORD dwReserved;
}DEV_DECODER_VIDEO_OUT_CH_MODE_CON,*PDEV_DECODER_VIDEO_OUT_CH_MODE_CON;
typedef struct __attribute__((packed)) tVIDEO_OUT_MODE_CON
{
	U8	OpCode;
	U8	CmdParam[sizeof(DEV_DECODER_VIDEO_OUT_CH_MODE_CON)];
	U8	Sum;
	U8	Eoi;
}VIDEO_OUT_MODE_CON,*PVIDEO_OUT_MODE_CON;


typedef struct __attribute__((packed)) tSER_DEV_PM500_SET
{
	U8	OpCode;
}SER_DEV_PM5000_SET,*PSER_DEV_PM5000_SET;

typedef struct __attribute__((packed)) tSER_DEV_PM500_DO_CTRL
{
	U8	OpCode;
	U8	GroupNo;
	U8	ChanNo;
	U8	OptType;
	U8	Sum;
	U8	Eoi;
}SER_DEV_PM5000_DO_CTRL,*PSER_DEV_PM5000_DO_CTRL;

typedef struct __attribute__((packed)) tSER_DEV_PM500_POLL_ADD
{
	U8	OpCode;
	U8	PortNo;
	U32	PollTime;
	U32	PollTimeOut;
	U8  Buf[1024];
}SER_DEV_PM5000_POLL_ADD,*PSER_DEV_PM5000_POLL_ADD;
typedef struct __attribute__((packed)) tSER_DEV_PM500_POLL_ADD_ACK
{
	U8	OpCode;
	U32	BaseIndex;
	U8	Sum;
	U8	Eoi;
}SER_DEV_PM5000_POLL_ADD_ACK,*PSER_DEV_PM5000_POLL_ADD_ACK;
typedef struct __attribute__((packed)) tSER_DEV_PM500_POLL
{
	U8	OpCode;
	U8		Soi;
	U8		Addr;
}SER_DEV_PM5000_POLL,*PSER_DEV_PM5000_POLL;
typedef struct __attribute__((packed)) tSER_DEV_PM500_POLL_ACK
{
	U8	OpCode;
	U32	GtmTime;
}SER_DEV_PM5000_POLL_ACK,*PSER_DEV_PM5000_POLL_ACK;
typedef struct __attribute__((packed)) tSER_DEV_PM500_POLL_RESET
{
	U8	OpCode;
	U8	Sum;
	U8	Eoi;
}SER_DEV_PM5000_POLL_RESET,*PSER_DEV_PM5000_POLL_RESET;

typedef struct __attribute__((packed)) tSER_DEV_PM500_STATE_QUERY
{
	U8	OpCode;
	U8	E1IntfEnable;
	U8	MediaIntfEnable;
	U8	BcmIntfEnable;
	U32	FirmwareVer;
	U32	SysRunTime;
	U8	CpuOccupancy;
	U8	MemOccupancy;
	U8	FlashOccupancy;
	U8	EepromOccupancy;
	U8	WatchdogStatus;
	U8	DiskOccupancy;
	U8	E1IntfInOccupancy;
	U8	E1IntfOutOccupancy;
	U8	EthIntfOccupancy;
	U8 	E1LosFlag;
	U8 	E1LofFlag;
	U8 	EthLinkStatus;
	U8 	EthIntfSpeed;
	U8 	EthIntfMode;
	U8 	ComMaxNum;
	U32	Com1RxCount;
	U32	Com1TxCount;
	U32	Com2RxCount;
	U32	Com2TxCount;
	U32	Com3RxCount;
	U32	Com3TxCount;
	U32	Com4RxCount;
	U32	Com4TxCount;
	U32	Com5RxCount;
	U32	Com5TxCount;
	U32	Com6RxCount;
	U32	Com6TxCount;
	U32	Com7RxCount;
	U32	Com7TxCount;
	U32	Com8RxCount;
	U32	Com8TxCount;
	U32	Com9RxCount;
	U32	Com9TxCount;
	U32	Com10RxCount;
	U32	Com10TxCount;
	U32	Com11RxCount;
	U32	Com11TxCount;
	U32	Com12RxCount;
	U32	Com12TxCount;
	U32	Com13RxCount;
	U32	Com13TxCount;
	U32	Com14RxCount;
	U32	Com14TxCount;
	U32	Com15RxCount;
	U32	Com15TxCount;
	U32	Com16RxCount;
	U32	Com16TxCount;
	U8	Sum;
	U8	Eoi;
}SER_DEV_PM5000_STATE_QUERY,*PSER_DEV_PM5000_STATE_QUERY;

typedef struct __attribute__((packed)) tSER_DEV_PM500_TIME_SET
{
	U8	OpCode;
	U16	Year;
	U8	Month;
	U8	Day;
	U8	Hour;
	U8	Min;
	U8	Sec;
	U8	Sum;
	U8	Eoi;
}SER_DEV_PM5000_TIME_SET,*PSER_DEV_PM5000_TIME_SET;

typedef struct __attribute__((packed)) tDOOR_CTRL_CON
{
	 BYTE  CardType;  
	 BYTE  IsLockUse;
	 BYTE  LockDoNode;
	 BYTE  LockOpenCtrl;
	 BYTE  IsInfraredUse;
	 BYTE  InfraredDiNode;
	 BYTE  InfraredAlertState;
	 BYTE  IsButtonUse; 
	 BYTE  ButtonDiNode;
	 BYTE  ButtonPushState;
	 BYTE  IsDoorUse; 
	 BYTE  DoorDiNode;
	 BYTE  DoorOpenState;
	 BYTE  LockType;
	 BYTE  LockOpenDelayS;
}DOOR_CTRL_CON,*PDOOR_CTRL_CON;
typedef struct __attribute__((packed)) tSER_DOOR_CTRL_CON
{
	 BYTE OpCode;
	 BYTE CmdParam[sizeof(DOOR_CTRL_CON)];
	 BYTE Sum;
	 BYTE Eoi;
}SER_DOOR_CTRL_CON,*PSER_DOOR_CTRL_CON;

typedef struct __attribute__((packed)) tTEMP_HUM_SENSOR_CON
{
	BYTE		IsSensorEnable;
	BYTE		SensorType;			/*0--SHT1X*/
	BYTE		SensorI2cBus;		/*0~1*/
	BYTE		SensorI2cAddr;		/*0~7*/
	BYTE		SensorUpID;			/*0~7，对应上行协议位号，温度湿度前后各一组上报*/
	BYTE		SensorUpTempRange;	/*0--0~100摄氏度，1-- -75~125摄氏度*/
	BYTE		Reserved1;
	BYTE		Reserved2;
}TEMP_HUM_SENSOR_CON,*PTEMP_HUM_SENSOR_CON;
typedef struct __attribute__((packed)) tTEMP_HUM_SENSOR_CON_TAB
{
	BYTE						SensorNum;
	TEMP_HUM_SENSOR_CON			SensorTab[16];
}TEMP_HUM_SENSOR_CON_TAB,*PTEMP_HUM_SENSOR_CON_TAB;
typedef struct __attribute__((packed)) tSER_TEMP_HUM_SENSOR_CON_TAB
{
	BYTE	OpCode;
	BYTE	CmdParam[sizeof(TEMP_HUM_SENSOR_CON_TAB)];
	BYTE	Sum;
	BYTE	Eoi;
}SER_TEMP_HUM_SENSOR_CON_TAB,*PSER_TEMP_HUM_SENSOR_CON_TAB;


typedef struct __attribute__((packed)) tDEV_MATRIX_CH_CONFIG
{
	BYTE    IsEnable;	
	BYTE	CtrlProtocolType;
	BYTE	CtrlBusAddr;
	BYTE	CtrlPort;
	WORD	wReserved;
	BYTE    bUserName[16];
	BYTE	bPassword[16];
}DEV_MATRIX_CH_CONFIG,*PDEV_MATRIX_CH_CONFIG;
typedef struct __attribute__((packed)) tDEV_MATRIX_CONFIG
{
	DEV_MATRIX_CH_CONFIG	DevMatrixChSet[4];
}DEV_MATRIX_CONFIG,*PDEV_MATRIX_CONFIG;
typedef struct __attribute__((packed)) tSER_GET_MATRIX_CONFIG
{
	BYTE	OpCode;
	BYTE	CmdParam[sizeof(DEV_MATRIX_CONFIG)];
	BYTE	Sum;
	BYTE	Eoi;	
}SER_GET_MATRIX_CONFIG,*PSER_GET_MATRIX_CONFIG;

typedef struct __attribute__((packed)) tVIRTUAL_MATRIX_CTRL			
{
	BYTE    MatrixID;	
	BYTE	dwSiteCode;
	WORD	dwInputIdx;
	WORD    dwOutputIdx;
	BYTE	wSpeed;
	BYTE	wPresetNo;
	DWORD	dwReserved;
}MATRIX_CTRL,*PMATRIX_CTRL;
typedef struct __attribute__((packed)) tSER_VIRTUAL_MATRIX_CTRL
{
	BYTE	OpCode;
	BYTE	CmdParam[sizeof(MATRIX_CTRL)];
	BYTE	Sum;
	BYTE	Eoi;
}SER_VIRTUAL_MATRIX_CTRL,*PSER_VIRTUAL_MATRIX_CTRL;

#define MODBUS_MAKE_IEC104_CONF(IsEnable,Addr,Port,IsFixedAddrSpace,IsConverseLink,IsAddrMap)	(((IsEnable)?0x80000000:0)|((IsFixedAddrSpace)?0x40000000:0)|((IsConverseLink)?0x20000000:0)|((IsAddrMap)?0x10000000:0)|(((Addr)&0xFF)<<16)|((Port)&0xFFFF))
#define MODBUS_GET_IEC104_ENABLE(IEC104Conf)													(((IEC104Conf)&0x80000000)?1:0)
#define MODBUS_GET_IEC104_FIXED_ADDR_SPACE(IEC104Conf)											(((IEC104Conf)&0x40000000)?1:0)
#define MODBUS_GET_IEC104_CONVERSE_LINK(IEC104Conf)												(((IEC104Conf)&0x20000000)?1:0)
#define MODBUS_GET_IEC104_ADDR_MAP(IEC104Conf)													(((IEC104Conf)&0x10000000)?1:0)
#define MODBUS_GET_IEC104_ADDR(IEC104Conf)														(((IEC104Conf)>>16)&0xFF)
#define MODBUS_GET_IEC104_PORT(IEC104Conf)														((IEC104Conf)&0xFFFF)
#define MODBUS_MAKE_DWRESERVED1(IsEbiEnable,IsTransSerEnable,TransSerNetPortBase)				(((IsEbiEnable)?0x80000000:0)|((IsTransSerEnable)?0x40000000:0)|((TransSerNetPortBase)&0xFFFF))			
#define MODBUS_GET_DWRESERVED1_EBI_ENABLE(Reserved1)											(((Reserved1)&0x80000000)?1:0)
#define MODBUS_GET_DWRESERVED1_TRANS_SER_ENABLE(Reserved1)										(((Reserved1)&0x40000000)?1:0)
#define MODBUS_GET_DWRESERVED1_TRANS_SER_PORT(Reserved1)										((Reserved1)&0xFFFF)
typedef struct __attribute__((packed)) tMODBUS_SYS_CONFIG
{
	BYTE	IsEnableNetMode;
	BYTE	IsEnableSerMode;
	BYTE	IsEnableAsciiMode;
	BYTE	IsEnableManufacturerID;
	BYTE	SerUnit;
	BYTE	SerSlaveAddr;
	WORD	NetServerPort;
	DWORD	dwIEC104Conf;
	BYTE	strCompanyName[16];
	DWORD	dwIEC104ServerIP;
	WORD	wIEC104ServerPort;
	WORD	wReserved;
	DWORD	dwReserved1;
	DWORD	dwReserved2;
}MODBUS_SYS_CONFIG,*PMODBUS_SYS_CONFIG;
typedef struct __attribute__((packed)) tSER_MODBUS_SYS_CONFIG
{
	BYTE	OpCode;
	BYTE	CmdParam[sizeof(MODBUS_SYS_CONFIG)];
	BYTE	Sum;
	BYTE	Eoi;
}SER_MODBUS_SYS_CONFIG,*PSER_MODBUS_SYS_CONFIG;

typedef struct __attribute__((packed)) tDOOR_CTRL_CON_EX_UNIT
{
	BYTE		UnitNode;			/*门禁单元号*/
	BYTE		IsUnitEna;			/*门禁单元使能，不使能时静态数据保留、只响应读取组信息和卡号管理命令*/
	BYTE		OutCardType;		/*外门读卡器类型*/	
	BYTE		OutCardDevAddr;		/*外门外接读卡器智能设备地址*/
	BYTE		InCardEna;			/*内门读卡器使能*/
	BYTE		InCardType;			/*内门读卡器类型*/	
	BYTE		InCardDevAddr;		/*内门外接读卡器智能设备地址*/
	BYTE		IsLockUse;			/*门锁是否使用*/
	BYTE		LockDoNode;			/*门锁DO节点*/
	BYTE		LockOpenCtrl;		/*门锁打开电平*/
	BYTE		IsInfraredUse;		/*红外是否使用*/
	BYTE		InfraredDiNode;		/*红外DI节点*/
	BYTE		InfraredAlertState;	/*红外告警电平*/
	BYTE		IsButtonUse;		/*按钮是否使用*/
	BYTE		ButtonDiNode;		/*按钮DI节点*/
	BYTE		ButtonPushState;	/*按钮触发电平*/
	BYTE		IsDoorUse;			/*门磁是否使用*/
	BYTE		DoorDiNode;			/*门磁DI节点*/
	BYTE		DoorOpenState;		/*门磁开门状态电平*/
	BYTE		LockType;			/*门锁类型*/
	BYTE		LockDelayS;			/*关门延迟时间s*/
	BYTE		Reserved[11];		
}DOOR_CTRL_CON_EX_UNIT,*PDOOR_CTRL_CON_EX_UNIT;
typedef struct __attribute__((packed)) tSER_DOOR_CTRL_CON_EX_UNIT
{
	BYTE OpCode;
	BYTE CmdParam[sizeof(DOOR_CTRL_CON_EX_UNIT)];
	BYTE Sum;
	BYTE Eoi;
}SER_DOOR_CTRL_CON_EX_UNIT,*PSER_DOOR_CTRL_CON_EX_UNIT;

typedef struct __attribute__((packed)) tSMS_AGENT_CON
{
	BYTE		IsModuleEna;					/*模块总使能*/
	BYTE		IsPeriodicAutoReportEna;		/*周期性自动上报使能*/
	DWORD		AutoReportPeriodS;				/*周期性自动上报间隔，秒计*/
	BYTE		IsDoorNewRecordAutoReportEna;	/*门禁产生新记录自动上报使能*/
	BYTE		IsTriggeredAutoReportEna;		/*触发性自动上报使能*/
	BYTE		IsAnalogThresholdDetectEna;		/*模拟量死区检测使能*/
	char		AnalogDetectPercent[8];			/*模拟量死区检测百分比，字符串输入，单位为%*/
	BYTE		IsSMSNumCtrlEna;				/*短信时间密度控制使能*/
	DWORD		SMSMaxNumPerHour;				/*短信时间密度控制，每小时最多短信条数*/
	DWORD		SMSMaxNumPerDay;				/*短信时间密度控制，每天最多短信条数*/
	char		SMSCenterAddr[32];				/*短信中心地址*/
	BYTE		IsResponseServerPollOnly;		/*短信响应轮训严格模式使能，使能时仅响应配置的服务器地址*/
	char		SMSServerAddr[32];				/*短信服务器地址，主动上报发往该地址*/
	BYTE		Reserved[37];
}SMS_AGENT_CON,*PSMS_AGENT_CON;
typedef struct __attribute__((packed)) tSER_SMS_AGENT_CON
{
	BYTE OpCode;
	BYTE CmdParam[sizeof(SMS_AGENT_CON)];
	BYTE Sum;
	BYTE Eoi;
}SER_SMS_AGENT_CON,*PSER_SMS_AGENT_CON;

typedef struct __attribute__((packed)) tSER_AGENT_CONF 
{
	BYTE		IsEna;					/*模块总使能*/
	BYTE		IsEIMS2LoopEna;			/*2EIM-S环网应用使能 该功能使能时代理串口或透明串口功能禁止*/
	BYTE		IsAddrMapEna;			/*地址映射使能*/
	BYTE		AddrMapBaseAddr;		/*地址映射基地址*/
	BYTE		AddrMapAddrNum;			/*地址映射地址范围总数*/
	BYTE		AgentSerDevUnit;		/*代理串口号*/
	BYTE		AgentAuxSerDevUnit;		/*辅助代理串口 仅用于2EIM-S环网应用*/
	BYTE		IsTransSerEna;			/*透明串口使能位*/
	BYTE		TransSerDevUnit;		/*透明串口号*/
	BYTE		Reserved[7];
}SER_AGENT_CONF,*PSER_AGENT_CONF;
typedef struct __attribute__((packed)) tSER_SER_AGENT_CONF
{
	BYTE		OpCode;
	BYTE		CmdParam[sizeof(SER_AGENT_CONF)];
	BYTE		Sum;
	BYTE		Eoi;
}SER_SER_AGENT_CONF,*PSER_SER_AGENT_CONF;

typedef struct __attribute__((packed)) tBI_RUN_STAT
{
	DWORD BiLoginFailCount;
	DWORD BiLoginOkCount;
	DWORD BiLoginResErrCount;
	DWORD BiLoginReqVpnRedialCount;
	DWORD BiSendAlarmFailCount;
	DWORD BiSendAlarmOkCount;
	DWORD BiSendAlarmResErrCount;
	DWORD BiSendAlarmDiscardCount;
	DWORD BiSendAlarmReqVpnRedialCount;
	DWORD BiServerWorkCount;
	DWORD BiServerFailCount;
	DWORD BiServerWorkerCount;
	DWORD BiServerBusyCount;
	DWORD BiServerWorkerFailCount;
	DWORD ScKeepAliveCount;
	DWORD ScFsuIdErrCount;
	DWORD FsuVpnRedialCount;
	DWORD FsuModemRedialCount;
	DWORD FsuModemSoftRebootCount;
	DWORD FsuModemHardResetCount;
	DWORD FsuVpnSoftRebootCount;
	DWORD FsuModemRouteLostCount;
	DWORD Reserved[38];
}BI_RUN_STAT,*PBI_RUN_STAT;
typedef struct __attribute__((packed)) tSER_BI_RUN_STAT
{
	BYTE		OpCode;
	BYTE		CmdParam[sizeof(BI_RUN_STAT)];
	BYTE		Sum;
	BYTE		Eoi;
}SER_BI_RUN_STAT,*PSER_BI_RUN_STAT;



typedef  struct __attribute__((packed)) tSIMSERCTRLCMD
{
	U8		Soi;
	U8		Addr;
	U8		Len;
	union __attribute__((packed)) tSIMSER_CONFIG_PROTOCOL
	{
		SER_VIDEO_TRANSPARENCY_CONFIG		VideoTransparencySet;
		SER_VIDEO_ENC_ADV_OPTION			VideoEncAdvOption;
		SER_ADDR_SERVER_CONFIG				AddrServerSet;
		SER_AUDIO_CODEC_CONFIG				AudioCodecSet;
		SER_DIDO_LLINKAGE_CONFIG			DiDoLinkageSet;
		SER_VIRTUAL_CAMERA_CTRL				VirtualCameraCtrl;
		SER_DEV_VMD_CH_CONFIG				MotionDetect;
		SER_DEV_WEB_SERVER_CONFIG			WebServerConfig;
		SER_DEV_VIDEO_WARN					VideoWarn;
		SER_DEV_VIDEO_OVERLAY_CONFIG		OverlayConfig;
		SER_DEV_NET_SWITCH_CONFIG			NetSwitchSet;
		SER_SYS_NET_ADV_CONFIG				SysNetAdvSet;
		SER_GMT_TIME_CONFIG					GmtTimeSet;
		SER_TRANSMIT_CONFIG					TransmitConfig;
		SER_NET_MANAGER_SET					NetManagerSet;
		SER_SAA7113_CTRL					SAA7113Ctrl;
		SER_DIDO_CONFIG						DiDoCtrlSet;
		SER_RC7222_CONFIG					Rc7222Set;
		SER_VIDEO_ENCODER_OPTION			VideoEncoderOption;
		SER_GPS_ACCESS_SPECIFICATION_MSG	GpsAccessMsg;
		SER_DEV_VI_CAPTURE_SET				ViCaptureSet;
		SER_DEV_ZJVCPT_MEDIA_CH_CON			ZjvcptMediaChCon;
		SER_DEV_MAP_CON						SerialMapCon;
		VIDEO_OUT_MODE_CON					VoutModeCon;
		SER_DEV_PM5000_SET					PM5000Con;
		SER_DEV_PM5000_DO_CTRL				PM5000DoCtrl;
		SER_DEV_PM5000_POLL_ADD				PM5000PoolAdd;
		SER_DEV_PM5000_POLL_ADD_ACK			PM5000PoolAddAck;
		SER_DEV_PM5000_POLL_RESET			PM5000PoolReset;
		SER_DEV_PM5000_STATE_QUERY			PM5000StateQuery;
		SER_DEV_PM5000_TIME_SET				PM5000GtmTime;
		SER_DOOR_CTRL_CON					PM5000DoorCtrl;
		SER_TEMP_HUM_SENSOR_CON_TAB			PM5000TempSensorCon;
		SER_WARN_LLINKAGE_CONFIG			WarnLinkageSet;
		SER_DEV_PM5000_POLL					PM5000Poll;
		SER_DEV_PM5000_POLL_ACK				PM5000PollAck;
		SER_GET_MATRIX_CONFIG				MatrixConfigSet;
		SER_VIRTUAL_MATRIX_CTRL				VirtualMatrixCtrl;
		SER_MODBUS_SYS_CONFIG				ModbusConf;
		SER_DOOR_CTRL_CON_EX_UNIT			PM5000DoorCtrlUnit;
		SER_SMS_AGENT_CON					PM5000SmsAgentConf;
		SER_SER_AGENT_CONF					PM5000SerAgentConf;
		SER_SYS_MISC_CONF					MiscConf;
		SER_BI_RUN_STAT						BiRunStat;
		SER_SYS_MISC_TEST					MiscTest;
		U8									CommBuf[1024];
	}Dev;
}SIMSERCTRLCMD,*PSIMSERCTRLCMD;
typedef struct __attribute__((packed)) tEMBED_SIMSERCTRLCMD
{
	U32				EmbedIDL;
	U32				EmbedIDH;
	SIMSERCTRLCMD	SerCmd;
}EMBED_SIMSERCTRLCMD,*PEMBED_SIMSERCTRLCMD;




typedef  struct __attribute__((packed)) tPCMCMD
{
	U8		Soi;
	U8		Addr;
	U8		Len;
	U8		OpCode;
	U8 		Sum;
	U8		Eoi;
}PCMCMD,*PPCMCMD;

typedef  struct __attribute__((packed)) tBCMCMD
{
	U8		Soi;
	U8		Addr;
	U8		Len;
	U8		OpCode;
	U8		Param;
	U8 		Sum;
	U8		Eoi;
}BCMCMD,*PBCMCMD;

typedef struct tPCM_DEV_CLASS_DES
{
	BYTE		m_DevClassID;		/*智能设备抽象种类唯一标识*/
	BYTE		m_bReserved;
	WORD		m_wReserved;
	BYTE		m_strDevClassName[32];
}PCM_DEV_CLASS_DES,*PPCM_DEV_CLASS_DES;
typedef struct tPCM_DEV_CLASS_TAB
{
	BYTE						m_DevClassNum;
	BYTE						m_bReserved;
	WORD						m_wReserved;
	PCM_DEV_CLASS_DES			m_DevClassTab[64];
}PCM_DEV_CLASS_TAB,*PPCM_DEV_CLASS_TAB;

typedef struct tPCM_DEV_PORT_CONF_DES
{
	 BYTE      m_PortConfID;
	 BYTE      m_strPortConf[31];  /*串行通讯端口配置描述，最大30个有效字符，典型格式：9600,n,8,1,复杂格式：9600|4800,n|e,8,1*/
}PCM_DEV_PORT_CONF_DES,*PPCM_DEV_PORT_CONF_DES;
typedef struct tPCM_DEV_PORT_CONF_TAB
{
	 BYTE      m_PortConfNum;
	 BYTE      m_bReserved;
	 WORD      m_wReserved;
	 PCM_DEV_PORT_CONF_DES  m_PortConfTab[125];
}PCM_DEV_PORT_CONF_TAB,*PPCM_DEV_PORT_CONF_TAB;

typedef struct tPCM_DEV_TYPE_DES
{
	 WORD  	m_wDevType;        /*智能设备具体类型唯一标识*/
	 BYTE  	m_DevClassID;
	 BYTE   m_DevPortConfID;
	 BYTE  	m_strDevTypeName[32];
	 DWORD  m_OptionPollTimerMS;     /*设备所有数据采集一遍的时间间隔*/
	 DWORD  m_OptionPollTimeoutMS;     /*设备单条命令响应超时时间*/
	 BYTE  	m_strOptionDevDownAddr[32];    /*设备下行协议地址,格式为空字符结束的标准十进制C语言字符串,最大31个有效字符*/
	 BYTE  	m_strDevSpecalOptionDefault[48];  /*具体智能设备类型特定专用的参数选项默认值格式模板,最大47个有效字符*/  
}PCM_DEV_TYPE_DES,*PPCM_DEV_TYPE_DES;
typedef struct tPCM_DEV_TYPE_TAB
{
	BYTE		m_DevTypeNum;
	BYTE	 	m_bFlagEnd;  /*智能设备具体类型列表分段顺序传输，该标记置TRUE表示本段为最后一段*/
	WORD	 	m_wReserved;
	PCM_DEV_TYPE_DES m_DevTypeTab[32];
}PCM_DEV_TYPE_TAB,*PPCM_DEV_TYPE_TAB;
typedef struct tPCM_DEV_TYPE_TAB_LOCAL
{
	BYTE		m_DevTypeNum;
	BYTE	 	m_bFlagEnd;  /*智能设备具体类型列表分段顺序传输，该标记置TRUE表示本段为最后一段*/
	WORD	 	m_wReserved;
	PCM_DEV_TYPE_DES m_DevTypeTab[1024];
}PCM_DEV_TYPE_TAB_LOCAL,*PPCM_DEV_TYPE_TAB_LOCAL;

typedef struct tPCM_DEV_INSTANCE_DES
{
	 WORD    m_wDevType;   /*智能设备具体类型唯一标识*/
	 BYTE    m_IsEnable;   /*智能设备实例启用标记*/
	 BYTE    m_bReserved;
	 BYTE    m_DevUpAddr;  /*智能设备实例唯一标识*/
	 BYTE    m_DevDownPort;  /*智能设备通讯串口号*/
	 BYTE    m_IsOptionEnable;
	 BYTE    m_IsEnableSpecalOption;
	 DWORD    m_OptionPollTimerMS;   /*设备所有数据采集一遍的时间间隔*/
	 DWORD    m_OptionPollTimeoutMS;   /*设备单条命令响应超时时间*/
	 BYTE    m_strOptionDevDownAddr[32];  /*设备下行协议地址,格式为空字符结束的标准十进制C语言字符串,最大31个有效字符*/
	 BYTE    m_strDevSpecalOption[48];  /*具体智能设备类型特定专用的参数选项,格式为空字符结束的标准C语言字符串,最大47个有效字符*/
}PCM_DEV_INSTANCE_DES,*PPCM_DEV_INSTANCE_DES;
typedef struct tPCM_DEV_INSTANCE_TAB
{
	BYTE						m_DevInstanceNum;
	BYTE						m_bReserved;
	WORD						m_wReserved;
	PCM_DEV_INSTANCE_DES		m_DevInstanceTab[50];
}PCM_DEV_INSTANCE_TAB,*PPCM_DEV_INSTANCE_TAB;
typedef struct tPCM_DEV_CONFIG_DES
{
	 WORD  	m_wDevConfigType;        
	 BYTE  	m_DevConfigNumber;
	 BYTE   m_DevConfigNodeNum;
	 BYTE  	m_DevConfigDescription[128];
	 DWORD  m_DevConfigSize;     
	 BYTE  	m_DevConfigUnitDesc[32];   
}PCM_DEV_CONFIG_DES,*PPCM_DEV_CONFIG_DES;

typedef struct tPCM_DEV_CONFIG_TAB_LOCAL
{
	DWORD				m_DevConfigNum;
	DWORD	 			m_wReserved;
	PCM_DEV_CONFIG_DES 	m_DevConfigTab[1024];
}PCM_DEV_CONFIG_TAB_LOCAL,*PPCM_DEV_CONFIG_TAB_LOCAL;


typedef struct _tPCM_GEN_GET_DEV_DATA_DESC_REQ
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_bReserved;			/*保留置0*/
	WORD						m_wReserved;			/*保留置0*/
}PCM_GEN_GET_DEV_DATA_DESC_REQ,*PPCM_GEN_GET_DEV_DATA_DESC_REQ;
typedef struct _tPCM_GEN_GET_DEV_DATA_DESC_ACK
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_IsOK;					/*成功：非零；失败：零*/
	WORD						m_wReserved;			/*保留置0*/
	PM5K_PCM_DATA_DESC			m_DataDesc;				/*智能设备数据结构描述*/
}PCM_GEN_GET_DEV_DATA_DESC_ACK,*PPCM_GEN_GET_DEV_DATA_DESC_ACK;

typedef struct _tPCM_GEN_GET_DEV_RO_DATA_REQ
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_bReserved;			/*保留置0*/
	WORD						m_wReserved;			/*保留置0*/
	DWORD						m_StartNodeNo;			/*零基起始节点编号*/
	DWORD						m_ReqNodeNum;			/*请求访问节点数目*/
}PCM_GEN_GET_DEV_RO_DATA_REQ,*PPCM_GEN_GET_DEV_RO_DATA_REQ;
typedef struct _tPCM_GEN_GET_DEV_RO_DATA_ACK
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_IsOK;					/*成功：非零；失败：零*/
	BYTE						m_NodeDataIsBigEndian;	/*节点数据大端字节序标记*/
	BYTE						m_bReserved;			/*保留置0*/
	DWORD						m_StartNodeNo;			/*零基起始节点编号*/
	DWORD						m_AckNodeNum;			/*实际访问节点数目*/
	DWORD						m_NodeDataLen;			/*有效节点数据总长度*/
	BYTE						m_NodeDataBuf[PCM_GEN_ACCESS_DEV_DATA_BUF_SIZE];	/*字节对齐紧凑格式连续存储的只读节点数据值序列，满足相应的智能设备数据结构描述*/
}PCM_GEN_GET_DEV_RO_DATA_ACK,*PPCM_GEN_GET_DEV_RO_DATA_ACK;

typedef struct _tPCM_GEN_GET_DEV_RW_DATA_REQ
{
	BYTE						m_DevAddr;			/*智能设备地址*/
	BYTE						m_bReserved;		/*保留置0*/
	WORD						m_wReserved;		/*保留置0*/
	DWORD						m_StartNodeNo;		/*零基起始节点编号*/
	DWORD						m_ReqNodeNum;		/*请求访问节点数目*/
}PCM_GEN_GET_DEV_RW_DATA_REQ,*PPCM_GEN_GET_DEV_RW_DATA_REQ;
typedef struct _tPCM_GEN_GET_DEV_RW_DATA_ACK
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_IsOK;					/*成功：非零；失败：零*/
	BYTE						m_NodeDataIsBigEndian;	/*节点数据大端字节序标记*/
	BYTE						m_bReserved;			/*保留置0*/
	DWORD						m_StartNodeNo;			/*零基起始节点编号*/
	DWORD						m_AckNodeNum;			/*实际访问节点数目*/
	DWORD						m_NodeDataLen;			/*有效节点数据总长度*/
	BYTE						m_NodeDataBuf[PCM_GEN_ACCESS_DEV_DATA_BUF_SIZE];	/*字节对齐紧凑格式连续存储的可读可写节点数据值序列，满足相应的智能设备数据结构描述*/
}PCM_GEN_GET_DEV_RW_DATA_ACK,*PPCM_GEN_GET_DEV_RW_DATA_ACK;

typedef struct _tPCM_GEN_SET_DEV_RW_DATA_REQ
{
	BYTE						m_DevAddr;				/*智能设备地址*/
	BYTE						m_NodeDataIsBigEndian;	/*节点数据大端字节序标记*/
	WORD						m_wReserved;			/*保留置0*/
	DWORD						m_StartNodeNo;			/*零基起始节点编号*/
	DWORD						m_ReqNodeNum;			/*请求访问节点数目*/
	DWORD						m_NodeDataLen;			/*有效节点数据总长度*/
	BYTE						m_NodeDataBuf[PCM_GEN_ACCESS_DEV_DATA_BUF_SIZE];	/*字节对齐紧凑格式连续存储的可读可写节点数据值序列，满足相应的智能设备数据结构描述*/
}PCM_GEN_SET_DEV_RW_DATA_REQ,*PPCM_GEN_SET_DEV_RW_DATA_REQ;
typedef struct _tPCM_GEN_SET_DEV_RW_DATA_ACK
{
	BYTE						m_DevAddr;		/*智能设备地址*/
	BYTE						m_IsOK;			/*成功：非零；失败：零*/
	WORD						m_wReserved;	/*保留置0*/
	DWORD						m_StartNodeNo;	/*零基起始节点编号*/
	DWORD						m_AckNodeNum;	/*实际访问节点数目*/
}PCM_GEN_SET_DEV_RW_DATA_ACK,*PPCM_GEN_SET_DEV_RW_DATA_ACK;


//浮点数遵循IEEE二进制浮点数算术标准(ANSI/IEEE STD 754-1985)/(IEC 60559:1989)/(IEEE 854-2008)
typedef struct _tFIRE_SECURITY_CONF
{
	DWORD				dwFireSecurityIsEnable;				//安消防服务模块启动标记
	DWORD				dwRemoteServerIP;
	WORD				wRemoteServerPort;
	WORD				wFtpServerPort;
	DWORD				dwFtpServerIP;
	WORD				wPowerOnProtectTimerS;				//上电布防时间,秒
	WORD				wAutoProtectTimerS;					//自动布防时间,秒
	WORD				wHandProtectTiemrS;					//手动布防时间,秒
	WORD				wOutOfDoorEarlyWarnReportTimerS;	//门外预警上报间隔时间,秒
	WORD				wAlarmReportTimerS;					//报警上报间隔时间,秒
	WORD				wServiceProvider;					//运营商类别
	WORD				wCardOpenDoorFailLockTimerS;		//刷卡失败后禁用时间,秒
	WORD				wDoorShockSensitivityLevel;			//震动灵敏度级别(门)
	WORD				wOutOfDoorInfraredRange;			//红外感应范围(门外)
	WORD				wPicFileSaveDays;					//图片文件保存天数
	float				FlammableGasLv1Threshold;			//可燃气体一级告警阈值
	float				FlammableGasLv2Threshold;			//可燃气体一级告警阈值
	float				PowerFailuerThreshold;				//停电告警阈值
	float				TemperatureHighThreshold;			//温度告警上限阈值
	float				HumidityThreshold;					//湿度告警阈值

	float				fFlammableGasConstantA;
	float				fFlammableGasConstantB;
	float				fTemperatureConstantA;
	float				fTemperatureConstantB;
	float				fHumidityConstantA;
	float				fHumidityConstantB;
	
	BYTE				bFlammableGasIsEnable;
	BYTE				bFlammableGasAiNo;
	BYTE				bIsSmogEnable;
	BYTE				bSmogDiNo;
	
	BYTE				bSmogWarnVal;
	BYTE				bIsInfraredEnable;					//多路红外使能掩码
	BYTE				bInfraredDiNo;
	BYTE				bInfraredWarnVal;

	BYTE				bIsWaterInEnable;
	BYTE				bWaterInDiNo;
	BYTE				bWaterInWarnVal;
	BYTE				bIsAirConditionLostEnable;

	BYTE				AirConditionLostDiNo;
	BYTE				AirConditionLostWarnVal;
	BYTE				bIsTransformerLostEnable;
	BYTE				TransformerLostDiNo;

	BYTE				TransformerLostWarnVal;
	BYTE				bIsThunderOutEnable;
	BYTE				ThunderOutDiNo;
	BYTE				ThunderOutWarnVal;

	BYTE				bIsShockEnable;					//多路震动使能掩码
	BYTE				bShockDiNo;
	BYTE				bShockWarnVal;
	BYTE				bIsLocalAlarmResetEnable;

	BYTE				bLocalAlarmResetDiNo;
	BYTE				bLocalAlarmResetWarnVal;
	BYTE				bIsAlarmDoEnable;
	BYTE				bAlarmDoNo;

	BYTE				bAlarmDoOnVal;
	BYTE				bIsOutFireDoEnable;
	BYTE				bOutFireDoNo;
	BYTE				bOutFireDoOnVal;

	BYTE				bIsLightCtrlDoEnable;
	BYTE				bLightCtrlDoNo;
	BYTE				bLightCtrlDoOnVal;
	BYTE				bIsPowerMeterEnable;

	BYTE				bPowerMeterUpAddr;
	BYTE				bHumitureIsEnable;
	BYTE				bHumitureType;
	BYTE				bHumitureUpAddr;

	BYTE				bTemperatureAiNo;
	BYTE				bHumidityAiNo;
	BYTE				bBhuDoorIsEnable;
	BYTE				bBhuDoorSerPort;

	BYTE				bBhuDoorBusAddr;
	BYTE				bFmstIsEnable;
	BYTE				bFmstSerPort;
	BYTE				bFmstBusAddr;

	BYTE				bOutOfDoorCameraIsEnable;
	BYTE				bOutOfDoorCameraIsLocalVi;
	BYTE				bOutOfDoorCameraLocalViNo;
	BYTE				bOutOfDoorCameraSerPort;

	BYTE				bOutOfDoorCameraBusAddr;
	BYTE				bInOfDoorCameraIsEnable;
	BYTE				bInOfDoorCameraIsLocalVi;
	BYTE				bInOfDoorCameraLocalViNo;

	BYTE				bInOfDoorCameraSerPort;
	BYTE				bInOfDoorCameraBusAddr;
	BYTE				bThirdCameraIsEnable;
	BYTE				bThirdCameraLocalViNo;
	
	BYTE				bFourthCameraIsEnable;
	BYTE				bFourthCameraLocalViNo;
	WORD				wReserved;

	char				strHostID[16];
	char				strFtpUserPassword[16];
	char				strFtpUserName[32];

	DWORD				dwReserved;

	BYTE				bInfraredDiNo2;
	BYTE				bInfraredWarnVal2;
	BYTE				bInfraredDiNo3;
	BYTE				bInfraredWarnVal3;

	BYTE				bInfraredDiNo4;
	BYTE				bInfraredWarnVal4;
	BYTE				bShockDiNo2;
	BYTE				bShockWarnVal2;

	BYTE				bShockDiNo3;
	BYTE				bShockWarnVal3;
	BYTE				bShockDiNo4;
	BYTE				bShockWarnVal4;

	BYTE				bDoorType;				//门禁类型
	char				bReservedBuf[115];	
}FIRE_SECURITY_CONF,*PFIRE_SECURITY_CONF;




typedef struct	tCMD_PACKET
{
	MMNET_HEADER		Header;
	union tCMD_PDU
	{	
		BYTE							ReservedBuf[5*1024];
		VIDEO_BUF						VideoBuf;
		AUDIO_BUF						AudioBuf;
		CMD_BUF							CmdBuf;
		SENDBUF							SendBuf;
		SIMSERCTRLCMD					SimSerCtrlCmd;
		EMBED_SIMSERCTRLCMD				EmbedSimSerCmd;
		IPCONFCMD						IPConfCmd;
		MACCONFCMD						MacConfCmd;
		VIDEOCONF						VideoConf;
		SERIALPARAM						SerialConf;
		SERIALSETINFO					SerialInfo;
		SERIALSETINFO_EX				SerialInfoEx;
		SYSRESETCONF					SysResetCmd;
		STOPVIDEO						StopVideo;
		STARTAUDIO						StartAudio;
		STOPAUDIO						StopAudio;
		USERLOGIN						UserLogin;
		USERLOGINEX						UserLoginEx;
		USERLOGINTABLE					UserLoginTable;
		IPCONFCMDEX						IPConfCmdEx;
		SERTIMECONFIGCMD				SerTimeConfigCmd;
		SERCONFIGCMD					SerConfigCmd;
		SERCONFIGCMD_EX					SerConfigCmdEx;
		NETMODECONCMD					NetModeConfigCmd;
		LOCALUSERCONCMD					LocalUserConCmd;
		LOCALVIDEOAUDIOCONCMD			LocalAudioVideo;
		REMOTENETMODECONCMD				RemoteNetModeCmd;
		DYNAMICSWITCHAIM				DynamicSwitchAimCmd;
		VIDEO_MULTICAST_ADDR			VideoMultiCast;
		DEV_RUN_STATUS_INFOEX			DevRunStatus;
		HW_VIDEO_FORMAT					HwVideoFormat;
		WARN_DI_LINKAGE_DO				WarnLinkage;
		CAPTURE_PICTURE_BUF				CaptureBuf;
		VIDEO_DEC_PLAY_CMD_ACK			VideoPlayAck;
		ADDRSERVER_AUTH_REQ_CMD			AddrServerAuthReq;
		ADDRSERVER_LOGIN_REQ_CMD		AddrServerLoginReq;
		DEV_WEB_SERVER_CONFIGEX			DevWebServerConfig;
		CAPTURE_PICTURE_SAVE_CMD		CaptureSaveCmd;
		RECORD_CURR_RUN_STATUS			RecordRunStatus;
		RECORD_DOWNLOAD_BUF				RecordDownLoadBuf;
		RECORD_DOWNLOAD_LIST_CMD_REQ	RecordDownLoadListReq;
		RECORD_DOWNLOAD_FILE_CMD_REQ	RecordDownLoadFileReq;
		MEGAEYES_CONFIG					MegaEyesConfig;
		IPCONFCMDNEW					IPConfCmdNew;
		PCM_DEV_PORT_CONF_TAB			PcmPortTab;
		PCM_DEV_CLASS_TAB				PcmClassTab;
		PCM_DEV_TYPE_TAB				PcmTypeTab;
		PCM_DEV_INSTANCE_TAB			PcmDevInstTab;
		CONFIG_DATABASE_DOWNLOAD_REQ	DatabaseDownLoadReq;
		CONFIG_DATABASE_DOWNLOAD_ACK	DatabaseDownLoadAck;
		CONFIG_DATABASE_UPLOAD_REQ		DatabaseUploadReq;
		CONFIG_DATABASE_UPLOAD_ACK		DatabaseUploadAck;
		FIRMWARE_UPDATE_REQ				FirmwareUpdateReq;
		FIRMWARE_UPDATE_ACK				FirmwareUpdateAck;
		FIRE_SECURITY_CONF				FireSecurityConf;

		PCM_GEN_GET_DEV_DATA_DESC_REQ	PcmGetDataDescReq;
		PCM_GEN_GET_DEV_DATA_DESC_ACK	PcmGetDataDescAck;
		PCM_GEN_GET_DEV_RO_DATA_REQ		PcmGetRoDataReq;
		PCM_GEN_GET_DEV_RO_DATA_ACK		PcmGetRoDataAck;
		PCM_GEN_GET_DEV_RW_DATA_REQ		PcmGetRwDataReq;
		PCM_GEN_GET_DEV_RW_DATA_ACK		PcmGetRwDataAck;
		PCM_GEN_SET_DEV_RW_DATA_REQ		PcmSetRwDataReq;
		PCM_GEN_SET_DEV_RW_DATA_ACK		PcmSetRwDataAck;
	}COMMAND;
}CMD_PACKET,*PCMD_PACKET;




/*内部接口数据类型*/


typedef struct tCMD_MAKE_HEADER
{
	DWORD	dwDestIP;
	DWORD	dwSrcIP;
	DWORD	dwCmdOpCode;
	DWORD	dwCmdObjID;
	DWORD	dwUserID;
	DWORD	dwFormat;
	BOOL	IsNetSend;
	int		SendTcpFd;
	int		ProtocolQueueID;
}CMD_MAKE_HEADER,*PCMD_MAKE_HEADER;

typedef struct tPROTOCOL_SERVER_PUBLIC_STATUS
{
	DWORD	QueueOverCount[PROTOCOL_COMM_QUEUE_MAX_NUM];
}PROTOCOL_SERVER_PUBLIC_STATUS,*PPROTOCOL_SERVER_PUBLIC_STATUS;

typedef struct tFIRMWARE_UPDATE_INFO
{
	 FIRMWARE_UPDATE_REQ	m_FirmwareUpdateReq;
	 CMD_MAKE_HEADER		m_CmdHeader;
}FIRMWARE_UPDATE_INFO,*PFIRMWARE_UPDATE_INFO;

/*
 ************************************************************************************************************************************************************************
 * 函数原型声明
 ************************************************************************************************************************************************************************
*/


#define SwapDword								JSYA_SwapDword
#define SwapWord								JSYA_SwapWord
#define SwapMmnetHeader							JSYA_SwapMmnetHeader
#define ProtocolSwapBodyByteOrder				JSYA_ProtocolSwapBodyByteOrder
#define ProtocolRecvCmd							JSYA_ProtocolRecvCmd
#define ProtocolMakeCmdNew						JSYA_ProtocolMakeCmdNew
#define ProtocolMakeCmdEx						JSYA_ProtocolMakeCmdEx
#define ProtocolMakeCmd							JSYA_ProtocolMakeCmd
#define ProtocolServerInit						JSYA_ProtocolServerInit
#define ProtocolQueueWrite						JSYA_ProtocolQueueWrite
#define ProtocolQueueRead						JSYA_ProtocolQueueRead
#define ProtocolQueueUserCtrl					JSYA_ProtocolQueueUserCtrl
#define ProtocolServerGetRunStatus				JSYA_ProtocolServerGetRunStatus


/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_SwapMmnetHeader
 *功能描述: 根据协议数据基本类型变换协议MMNET包头字节序
 *输入描述: 应用协议MMNET包头指针,协议命令头是否来自网络
 *输出描述: 匹配协议要求的字节序应用协议MMNET包头
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/02/12
 *全局声明: 无
 *特殊说明: 仅仅检查协议数据类型、长度、标识三个基本字段
 ************************************************************************************************************************************************************************       
 */
extern U32 	JSYA_SwapDword(U32 val);
extern U16 	JSYA_SwapWord(U16 val);
extern BOOL JSYA_SwapMmnetHeader(PMMNET_HEADER pHead,BOOL IsFromNet);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolSwapBodyByteOrder
 *功能描述: 处理协议命令体字节序转换
 *输入描述: 转换前协议命令、严格转换标志、协议命令体是否来自网络
 *输出描述: 转换后协议命令
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2010/04/30
 *全局声明: 无
 *特殊说明: 调用前必须保证协议头部字节序与系统当前本地字节序一致
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolSwapBodyByteOrder(PCMD_PACKET pCmd,BOOL IsStrict,BOOL IsFromNet);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolRecvCmd
 *功能描述: 从网络接收协议命令报文
 *输入描述: 网络接口句柄、命令缓冲区、模式标记、可选远程过滤地址以及结果
 *输出描述: 可选输出远程冲突标记
 *返回描述:	成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/11/15
 *全局声明: 无
 *特殊说明: 仅仅处理协议头部字节序
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolRecvCmd(int Fd,PCMD_PACKET pCmd,BOOL IsStreamMode,struct sockaddr_in *pRemoteAddr,BOOL *pConflict);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolMakeCmd,JSYA_ProtocolMakeCmdEx,JSYA_ProtocolMakeCmdNew
 *功能描述: 根据协议构造命令报文并自动根据参数设置选择直接网络发送或直接PCI发送或放入命令队列延迟发送
 *输入描述: 基本命令协议头参数、命令内容及其长度、可选扩展协议头参数、PCI模式标记
 *输出描述: 可选输出协议报文
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2009/06/19
 *全局声明: 无
 *特殊说明: 协议头重叠参数基本命令协议头优先，支持PCI模式
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolMakeCmdNew(const PCMD_MAKE_HEADER pCmdHeader,void *pCmdBody,DWORD BodyLen,PCMD_PACKET pCmdBuf,PMMNET_HEADER pCmdHeaderEx,BOOL IsPciModeSend);
extern BOOL JSYA_ProtocolMakeCmdEx(const PCMD_MAKE_HEADER pCmdHeader,void *pCmdBody,DWORD BodyLen,PCMD_PACKET pCmdBuf,PMMNET_HEADER pCmdHeaderEx);
extern BOOL JSYA_ProtocolMakeCmd(const PCMD_MAKE_HEADER pCmdHeader,void *pCmdBody,DWORD BodyLen,PCMD_PACKET pCmdBuf);






/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolServerInit
 *功能描述: 协议服务初始化
 *输入描述: 协议队列数目
 *输出描述: 无
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/08/09
 *全局声明: sProtocolServer,sProtocolMutex,sProtocolQueueCurrMaxNum
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolServerInit(DWORD CurrProtocolQueueNum);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolQueueWrite
 *功能描述: 协议队列输入
 *输入描述: 队列ID、数据及其大小、所有者标识、自动溢出标志、阻塞超时毫秒数、可选输入
 *输出描述: 无
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/08/09
 *全局声明: sProtocolServer,sProtocolMutex,sProtocolQueue,sProtocolQueueMutex,sProtocolQueueCurrMaxNum
 *特殊说明: 若IsAutoOver=TRUE,则忽略pTimeOutMS;pTimeOutMS为NULL表示无限阻塞
 *			，*pTimeOutMS为0表示不阻塞,阻塞超时返回失败；阻塞时与所有活动用户同步；
			可选输入目前暂时忽略,请设置NULL;
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolQueueWrite(DWORD QueueID,const void *pBuf,DWORD dwSize,DWORD OwnerID,BOOL IsAutoOver,const DWORD *pTimeOutMS,const void *pOption);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolQueueRead
 *功能描述: 协议队列读数据
 *输入描述: 队列ID、用户ID、数据输出缓存区及其大小、阻塞等待超时毫秒数、可选输出缓冲
 *输出描述: 当前数据及其长度
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/08/09
 *全局声明: sProtocolServer,sProtocolMutex,sProtocolQueue,sProtocolQueueMutex,sProtocolQueueCurrMaxNum
 *特殊说明: pTimeOutMS为NULL表示无限阻塞，*pTimeOutMS为0表示不阻塞,超时成功返回码流长度0；
 *			可选输出目前暂时忽略,请设置NULL;
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolQueueRead(DWORD QueueID,DWORD UserIndex,void *pBuf,DWORD *pBufSize,const DWORD *pTimeOutMS,void *pOption);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolQueueUserCtrl
 *功能描述: 协议队列用户活动控制
 *输入描述: 队列ID、用户ID、活动标记
 *输出描述: 无
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/08/09
 *全局声明: sProtocolServer,sProtocolMutex,sProtocolQueue,sProtocolQueueMutex,sProtocolQueueCurrMaxNum
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolQueueUserCtrl(DWORD QueueID,DWORD UserIndex,BOOL IsWork);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: JSYA_ProtocolServerGetRunStatus
 *功能描述: 获取协议服务器运行状态
 *输入描述: 无
 *输出描述: 协议服务器运行状态
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/12/12
 *全局声明: sProtocolMutex,sProtocolServer,sProtocolQueue
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern BOOL JSYA_ProtocolServerGetRunStatus(PPROTOCOL_SERVER_PUBLIC_STATUS pStatus);







/*
 ************************************************************************************************************************************************************************     
 *函数名称:
 *功能描述:
 *输入描述:
 *输出描述:
 *返回描述:
 *作者日期:
 *全局声明:
 *特殊说明:
 ************************************************************************************************************************************************************************       
 */




/*
 ************************************************************************************************************************************************************************
 * 全局变量输出声明
 ************************************************************************************************************************************************************************
*/


#ifdef	__cplusplus
#if		__cplusplus
}
#endif
#endif

/******************************************Protocol.h 文件结束******************************************************************************************************/
#endif
